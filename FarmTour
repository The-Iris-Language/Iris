; ModuleID = 'Iris'
source_filename = "Iris"

%Object_vtable = type {}
%Animal_vtable = type { void (%Animal**)*, void (%Animal**)* }
%Animal = type { %Animal_vtable*, i32, [2 x i8*] }
%Farmer_vtable = type { void (%Animal**)*, void (%Animal**)*, 
    void (%Farmer**, %Animal**)* }
%Farmer = type { %Farmer_vtable*, i32, [2 x i8*] }
%Cow_vtable = type { void (%Animal**)*, void (%Cow**)* }
%Cow = type { %Cow_vtable*, i32, [2 x i8*] }
%Pig_vtable = type { void (%Animal**)*, void (%Pig**)* }
%Pig = type { %Pig_vtable*, i32, [2 x i8*] }
%Duck_vtable = type { void (%Animal**)*, void (%Duck**)* }
%Duck = type { %Duck_vtable*, i32, [3 x i8*] }
%Sheep_vtable = type { void (%Animal**)*, void (%Sheep**)* }
%Sheep = type { %Sheep_vtable*, i32, [2 x i8*] }
%FarmTour_vtable = type { void (%FarmTour**)*, void (%FarmTour**, %Farmer**)*, 
    void (%FarmTour**, %Farmer**)*, void (%FarmTour**, %Farmer**)*, 
    void (%FarmTour**, %Farmer**)* }
%FarmTour = type { %FarmTour_vtable*, i32, [2 x i8*] }
%Main_vtable = type { i32 ()* }

@Object_vtable_data = global %Object_vtable zeroinitializer
@fmt = private unnamed_addr constant [3 x i8] c"%s\00", align 1
@fmt.1 = private unnamed_addr constant [4 x i8] c"%s\0A\00", align 1
@fmt.2 = private unnamed_addr constant [3 x i8] c"%d\00", align 1
@global_str = private unnamed_addr constant [4 x i8] c"...\00", align 1
@fmt.3 = private unnamed_addr constant [3 x i8] c"%s\00", align 1
@fmt.4 = private unnamed_addr constant [4 x i8] c"%s\0A\00", align 1
@fmt.5 = private unnamed_addr constant [3 x i8] c"%d\00", align 1
@global_str.6 = private unnamed_addr constant [6 x i8] c"Noise\00", align 1
@Animal_vtable_data = global %Animal_vtable { void (%Animal**)* @Animal_ignore, 
    void (%Animal**)* @Animal_noise }
@fmt.7 = private unnamed_addr constant [3 x i8] c"%s\00", align 1
@fmt.8 = private unnamed_addr constant [4 x i8] c"%s\0A\00", align 1
@fmt.9 = private unnamed_addr constant [3 x i8] c"%d\00", align 1
@class_location = private unnamed_addr constant [7 x i8] c"Farmer\00", align 1
@Farmer_vtable_data = global %Farmer_vtable { void (%Animal**)* @Animal_ignore, 
    void (%Animal**)* @Animal_noise, 
    void (%Farmer**, %Animal**)* @Farmer_callAnimal }
@fmt.10 = private unnamed_addr constant [3 x i8] c"%s\00", align 1
@fmt.11 = private unnamed_addr constant [4 x i8] c"%s\0A\00", align 1
@fmt.12 = private unnamed_addr constant [3 x i8] c"%d\00", align 1
@global_str.13 = 
    private unnamed_addr constant [12 x i8] c"Mooooooooo!\00", align 1
@Cow_vtable_data = global %Cow_vtable { void (%Animal**)* @Animal_ignore, 
    void (%Cow**)* @Cow_noise }
@fmt.14 = private unnamed_addr constant [3 x i8] c"%s\00", align 1
@fmt.15 = private unnamed_addr constant [4 x i8] c"%s\0A\00", align 1
@fmt.16 = private unnamed_addr constant [3 x i8] c"%d\00", align 1
@global_str.17 = 
    private unnamed_addr constant [11 x i8] c"Oink oink!\00", align 1
@Pig_vtable_data = global %Pig_vtable { void (%Animal**)* @Animal_ignore, 
    void (%Pig**)* @Pig_noise }
@fmt.18 = private unnamed_addr constant [3 x i8] c"%s\00", align 1
@fmt.19 = private unnamed_addr constant [4 x i8] c"%s\0A\00", align 1
@fmt.20 = private unnamed_addr constant [3 x i8] c"%d\00", align 1
@global_str.21 = private unnamed_addr constant [7 x i8] c"Quack!\00", align 1
@Duck_vtable_data = global %Duck_vtable { void (%Animal**)* @Animal_ignore, 
    void (%Duck**)* @Duck_noise }
@fmt.22 = private unnamed_addr constant [3 x i8] c"%s\00", align 1
@fmt.23 = private unnamed_addr constant [4 x i8] c"%s\0A\00", align 1
@fmt.24 = private unnamed_addr constant [3 x i8] c"%d\00", align 1
@global_str.25 = 
    private unnamed_addr constant [11 x i8] c"Baaaaaaah!\00", align 1
@Sheep_vtable_data = global %Sheep_vtable { void (%Animal**)* @Animal_ignore, 
    void (%Sheep**)* @Sheep_noise }
@fmt.26 = private unnamed_addr constant [3 x i8] c"%s\00", align 1
@fmt.27 = private unnamed_addr constant [4 x i8] c"%s\0A\00", align 1
@fmt.28 = private unnamed_addr constant [3 x i8] c"%d\00", align 1
@temp_str = private unnamed_addr constant [7 x i8] c"Farmer\00", align 1
@temp_str.29 = private unnamed_addr constant [5 x i8] c"Main\00", align 1
@global_str.30 = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@global_str.31 = 
    private unnamed_addr constant [65 x i8] 
    c"Welcome to Farmer Bob's farm! Let's see what animals we can see.\00", 
    align 1
@global_str.32 = private unnamed_addr constant [74 x i8] 
    c"There's Farmer Bob! Farmer Bob asks: 
    'What animal would you like to see?'\00", align 1
@global_str.33 = private unnamed_addr constant [77 x i8] 
    c"Please enter p for pig, co for cow, d for duck, 
    s for sheep, or q to leave: \00", align 1
@global_str.34 = private unnamed_addr constant [2 x i8] c"p\00", align 1
@global_str.35 = private unnamed_addr constant [2 x i8] c"p\00", align 1
@global_str.36 = private unnamed_addr constant [3 x i8] c"co\00", align 1
@global_str.37 = private unnamed_addr constant [3 x i8] c"co\00", align 1
@global_str.38 = private unnamed_addr constant [2 x i8] c"d\00", align 1
@global_str.39 = private unnamed_addr constant [2 x i8] c"d\00", align 1
@global_str.40 = private unnamed_addr constant [2 x i8] c"s\00", align 1
@global_str.41 = private unnamed_addr constant [2 x i8] c"s\00", align 1
@global_str.42 = private unnamed_addr constant [2 x i8] c"q\00", align 1
@global_str.43 = private unnamed_addr constant [2 x i8] c"q\00", align 1
@global_str.44 = private unnamed_addr constant [47 x i8] c"Farmer Bob says: 
    'Thanks for coming to visit!'\00", align 1
@global_str.45 = private unnamed_addr constant [68 x i8] c"Farmer Bob says: 
    'We don't have that animal here, maybe next time!'\00", align 1
@global_str.46 = private unnamed_addr constant [59 x i8] c"Farmer Bob asks: 
    'What animal would you like to see next?'\00", align 1
@global_str.47 = private unnamed_addr constant [84 x i8] c"Farmer Bob says: 
    'That's all the animals we have here, thanks for coming to visit!'\00", 
    align 1
@fmt.48 = private unnamed_addr constant [3 x i8] c"%s\00", align 1
@fmt.49 = private unnamed_addr constant [4 x i8] c"%s\0A\00", align 1
@fmt.50 = private unnamed_addr constant [3 x i8] c"%d\00", align 1
@temp_str.51 = private unnamed_addr constant [4 x i8] c"Pig\00", align 1
@temp_str.52 = private unnamed_addr constant [7 x i8] c"Farmer\00", align 1
@global_str.53 = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@global_str.54 = private unnamed_addr constant [68 x i8] c"Farmer Bob says: 
    'Sure thing! Let's go say hi to my friend Wilbur.'\00", align 1
@global_str.55 = private unnamed_addr constant [65 x i8] 
    c"You approach the pig pen and see a large pig sitting in the mud.\00", 
    align 1
@global_str.56 = private unnamed_addr constant [35 x i8] 
    c"Will you try calling Wilbur? y/n: \00", align 1
@global_str.57 = private unnamed_addr constant [2 x i8] c"y\00", align 1
@global_str.58 = private unnamed_addr constant [2 x i8] c"y\00", align 1
@global_str.59 = private unnamed_addr constant [23 x i8] 
    c"You try calling Wilbur\00", align 1
@global_str.60 = private unnamed_addr constant [29 x i8] 
    c"It seems Wilbur ignored you.\00", align 1
@global_str.61 = private unnamed_addr constant [52 x i8] 
    c"Farmer Bob says: 'Let me call Wilbur over: Wilbur!'\00", align 1
@global_str.62 = private unnamed_addr constant [54 x i8] 
    c"Wilbur walks over and you give him a pat on the nose.\00", align 1
@fmt.63 = private unnamed_addr constant [3 x i8] c"%s\00", align 1
@fmt.64 = private unnamed_addr constant [4 x i8] c"%s\0A\00", align 1
@fmt.65 = private unnamed_addr constant [3 x i8] c"%d\00", align 1
@temp_str.66 = private unnamed_addr constant [4 x i8] c"Cow\00", align 1
@temp_str.67 = private unnamed_addr constant [7 x i8] c"Farmer\00", align 1
@global_str.68 = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@global_str.69 = private unnamed_addr constant [68 x i8] 
    c"Farmer Bob says: 'Sure thing! Let's go say hi to my friend Bessie.'\00", 
    align 1
@global_str.70 = private unnamed_addr constant [69 x i8] 
    c"You approach the left side of the field and see a large cow grazing.\00", 
    align 1
@global_str.71 = private unnamed_addr constant [35 x i8] 
    c"Will you try calling Bessie? y/n: \00", align 1
@global_str.72 = private unnamed_addr constant [2 x i8] c"y\00", align 1
@global_str.73 = private unnamed_addr constant [2 x i8] c"y\00", align 1
@global_str.74 = private unnamed_addr constant [23 x i8] 
    c"You try calling Bessie\00", align 1
@global_str.75 = private unnamed_addr constant [29 x i8] 
    c"It seems Bessie ignored you.\00", align 1
@global_str.76 = private unnamed_addr constant [52 x i8] 
    c"Farmer Bob says: 'Let me call Bessie over: Bessie!'\00", align 1
@global_str.77 = private unnamed_addr constant [54 x i8] 
    c"Bessie walks over and you give her a pat on the nose.\00", align 1
@fmt.78 = private unnamed_addr constant [3 x i8] c"%s\00", align 1
@fmt.79 = private unnamed_addr constant [4 x i8] c"%s\0A\00", align 1
@fmt.80 = private unnamed_addr constant [3 x i8] c"%d\00", align 1
@temp_str.81 = private unnamed_addr constant [5 x i8] c"Duck\00", align 1
@temp_str.82 = private unnamed_addr constant [7 x i8] c"Farmer\00", align 1
@temp_str.83 = private unnamed_addr constant [9 x i8] c"FarmTour\00", align 1
@global_str.84 = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@global_str.85 = private unnamed_addr constant [69 x i8] c"Farmer Bob says: 
    'Sure thing! Let's go say hi to my friend Waddles.'\00", align 1
@global_str.86 = private unnamed_addr constant [52 x i8] 
    c"You approach a pond and see a duck swimming around.\00", align 1
@global_str.87 = private unnamed_addr constant [36 x i8] 
    c"Will you try calling Waddles? y/n: \00", align 1
@class_location.88 = private unnamed_addr constant [9 x i8] 
    c"FarmTour\00", align 1
@global_str.89 = private unnamed_addr constant [2 x i8] c"y\00", align 1
@global_str.90 = private unnamed_addr constant [2 x i8] c"y\00", align 1
@global_str.91 = private unnamed_addr constant [24 x i8] 
    c"You try calling Waddles\00", align 1
@class_location.92 = private unnamed_addr constant [9 x i8] c"FarmTour\00", 
    align 1
@global_str.93 = private unnamed_addr constant [48 x i8] 
    c"Farmer Bob says: 'Look at that, she came over!'\00", align 1
@global_str.94 = private unnamed_addr constant [54 x i8] 
    c"Farmer Bob says: 'Let me call Waddles over: Waddles!'\00", align 1
@global_str.95 = private unnamed_addr constant [44 x i8] 
    c"Waddles waddles over and you give her a pat\00", align 1
@fmt.96 = private unnamed_addr constant [3 x i8] c"%s\00", align 1
@fmt.97 = private unnamed_addr constant [4 x i8] c"%s\0A\00", align 1
@fmt.98 = private unnamed_addr constant [3 x i8] c"%d\00", align 1
@temp_str.99 = private unnamed_addr constant [6 x i8] c"Sheep\00", align 1
@temp_str.100 = private unnamed_addr constant [7 x i8] c"Farmer\00", align 1
@global_str.101 = private unnamed_addr constant [1 x i8] zeroinitializer, 
    align 1
@global_str.102 = private unnamed_addr constant [70 x i8] 
    c"Farmer Bob says: 'Sure thing! Let's go say hi to my friend Skittles.'\00", 
    align 1
@global_str.103 = private unnamed_addr constant [75 x i8] 
    c"You approach the right side of the field and see a 
    sheep grazing on grass.\00", align 1
@global_str.104 = private unnamed_addr constant [37 x i8] 
    c"Will you try calling Skittles? y/n: \00", align 1
@global_str.105 = private unnamed_addr constant [2 x i8] c"y\00", align 1
@global_str.106 = private unnamed_addr constant [2 x i8] c"y\00", align 1
@global_str.107 = private unnamed_addr constant [25 x i8] 
    c"You try calling Skittles\00", align 1
@global_str.108 = private unnamed_addr constant [31 x i8] 
    c"It seems Skittles ignored you.\00", align 1
@global_str.109 = private unnamed_addr constant [56 x i8] 
    c"Farmer Bob says: 'Let me call Skittles over: Skittles!'\00", align 1
@global_str.110 = private unnamed_addr constant [40 x i8] 
    c"Skittles approaches and give her a pet.\00", align 1
@FarmTour_vtable_data = 
    global %FarmTour_vtable { void (%FarmTour**)* @FarmTour_run,
    void (%FarmTour**, %Farmer**)* @FarmTour_seePig, 
    void (%FarmTour**, %Farmer**)* @FarmTour_seeCow, 
    void (%FarmTour**, %Farmer**)* @FarmTour_seeDuck, 
    void (%FarmTour**, %Farmer**)* @FarmTour_seeSheep }
@fmt.111 = private unnamed_addr constant [3 x i8] c"%s\00", align 1
@fmt.112 = private unnamed_addr constant [4 x i8] c"%s\0A\00", align 1
@fmt.113 = private unnamed_addr constant [3 x i8] c"%d\00", align 1
@temp_str.114 = private unnamed_addr constant [9 x i8] c"FarmTour\00", align 1
@temp_str.115 = private unnamed_addr constant [5 x i8] c"Main\00", align 1
@Main_vtable_data = global %Main_vtable { i32 ()* @main }

declare i32 @printf(i8*, ...)

declare i32 @printerr(i8*, ...)

declare i8** @readaline(...)

declare i1 @streq(i8*, i8*, ...)

declare void @class_permitted(i8*, i8**, i32, ...)

define void @Animal_ignore(%Animal** %0) {
entry:
  %temp = alloca %Animal*, align 8
  %temp1 = load %Animal*, %Animal** %0, align 8
  store %Animal* %temp1, %Animal** %temp, align 8
  %printf = call i32 (i8*, ...) 
      @printf(i8* getelementptr inbounds 
      ([4 x i8], [4 x i8]* @fmt.1, i32 0, i32 0),
      i8* getelementptr inbounds 
      ([4 x i8], [4 x i8]* @global_str, i32 0, i32 0))
  ret void
}

define void @Animal_noise(%Animal** %0) {
entry:
  %temp = alloca %Animal*, align 8
  %temp1 = load %Animal*, %Animal** %0, align 8
  store %Animal* %temp1, %Animal** %temp, align 8
  %printf = call i32 (i8*, ...) 
      @printf(i8* getelementptr inbounds 
      ([4 x i8], [4 x i8]* @fmt.4, i32 0, i32 0), 
      i8* getelementptr inbounds ([6 x i8], 
      [6 x i8]* @global_str.6, i32 0, i32 0))
  ret void
}

define void @Farmer_callAnimal(%Farmer** %0, %Animal** %1) {
entry:
  %temp = alloca %Farmer*, align 8
  %temp1 = load %Farmer*, %Farmer** %0, align 8
  store %Farmer* %temp1, %Farmer** %temp, align 8
  %temp2 = alloca %Animal*, align 8
  %temp3 = load %Animal*, %Animal** %1, align 8
  store %Animal* %temp3, %Animal** %temp2, align 8
  %temp4 = load %Animal*, %Animal** %temp2, align 8
  %permit_length_ptr = getelementptr inbounds %Animal, 
    %Animal* %temp4, i32 0, i32 1
  %permit_length = load i32, i32* %permit_length_ptr, align 4
  %permit_list_ptr = getelementptr inbounds %Animal, 
    %Animal* %temp4, i32 0, i32 2
  %str_ptr = getelementptr [2 x i8*], [2 x i8*]* %permit_list_ptr, i32 0, i32 0
  call void (i8*, i8**, i32, ...) 
      @class_permitted(i8* getelementptr inbounds ([7 x i8], 
      [7 x i8]* @class_location, i32 0, i32 0), i8** %str_ptr, 
      i32 %permit_length)
  %vtable = getelementptr inbounds %Animal, %Animal* %temp4, i32 0, i32 0
  %vtable5 = load %Animal_vtable*, %Animal_vtable** %vtable, align 8
  %fun_to_call = getelementptr inbounds %Animal_vtable, 
      %Animal_vtable* %vtable5, i32 0, i32 1
  %function = load void (%Animal**)*, void (%Animal**)** %fun_to_call, align 8
  call void %function(%Animal** %temp2)
  ret void
}

define void @Cow_noise(%Cow** %0) {
entry:
  %temp = alloca %Cow*, align 8
  %temp1 = load %Cow*, %Cow** %0, align 8
  store %Cow* %temp1, %Cow** %temp, align 8
  %printf = call i32 (i8*, ...) @printf(i8* getelementptr inbounds 
      ([4 x i8], [4 x i8]* @fmt.11, i32 0, i32 0), 
      i8* getelementptr inbounds ([12 x i8], 
      [12 x i8]* @global_str.13, i32 0, i32 0))
  ret void
}

define void @Pig_noise(%Pig** %0) {
entry:
  %temp = alloca %Pig*, align 8
  %temp1 = load %Pig*, %Pig** %0, align 8
  store %Pig* %temp1, %Pig** %temp, align 8
  %printf = call i32 (i8*, ...) 
      @printf(i8* getelementptr inbounds ([4 x i8], 
      [4 x i8]* @fmt.15, i32 0, i32 0), 
      i8* getelementptr inbounds ([11 x i8], 
      [11 x i8]* @global_str.17, i32 0, i32 0))
  ret void
}

define void @Duck_noise(%Duck** %0) {
entry:
  %temp = alloca %Duck*, align 8
  %temp1 = load %Duck*, %Duck** %0, align 8
  store %Duck* %temp1, %Duck** %temp, align 8
  %printf = call i32 (i8*, ...) 
      @printf(i8* getelementptr inbounds ([4 x i8], 
      [4 x i8]* @fmt.19, i32 0, i32 0), 
      i8* getelementptr inbounds 
      ([7 x i8], [7 x i8]* @global_str.21, i32 0, i32 0))
  ret void
}

define void @Sheep_noise(%Sheep** %0) {
entry:
  %temp = alloca %Sheep*, align 8
  %temp1 = load %Sheep*, %Sheep** %0, align 8
  store %Sheep* %temp1, %Sheep** %temp, align 8
  %printf = call i32 (i8*, ...) 
      @printf(i8* getelementptr inbounds 
      ([4 x i8], [4 x i8]* @fmt.23, i32 0, i32 0), 
      i8* getelementptr inbounds 
      ([11 x i8], [11 x i8]* @global_str.25, i32 0, i32 0))
  ret void
}

define void @FarmTour_run(%FarmTour** %0) {
entry:
  %temp = alloca %FarmTour*, align 8
  %temp1 = load %FarmTour*, %FarmTour** %0, align 8
  store %FarmTour* %temp1, %FarmTour** %temp, align 8
  %malloccall = tail call i8* @malloc(i32 ptrtoint 
      (%Farmer* getelementptr (%Farmer, %Farmer* null, i32 1) to i32))
  %Farmer = bitcast i8* %malloccall to %Farmer*
  %vtable = getelementptr inbounds %Farmer, %Farmer* %Farmer, i32 0, i32 0
  store %Farmer_vtable* @Farmer_vtable_data, %Farmer_vtable** %vtable, align 8
  %temp2 = alloca %Farmer*, align 8
  %num_permitted = getelementptr inbounds %Farmer, %Farmer* %Farmer, i32 0, i32 1
  store i32 2, i32* %num_permitted, align 4
  %permit_list = getelementptr inbounds %Farmer, %Farmer* %Farmer, i32 0, i32 2
  store [2 x i8*] [i8* getelementptr inbounds ([7 x i8], 
      [7 x i8]* @temp_str, i32 0, i32 0), i8* getelementptr inbounds 
      ([5 x i8], [5 x i8]* @temp_str.29, i32 0, i32 0)], 
      [2 x i8*]* %permit_list, align 8
  store %Farmer* %Farmer, %Farmer** %temp2, align 8
  %bob = alloca %Farmer*, align 8
  %temp3 = load %Farmer*, %Farmer** %temp2, align 8
  store %Farmer* %temp3, %Farmer** %bob, align 8
  %input = alloca i8*, align 8
  store i8* getelementptr inbounds ([1 x i8], [
        1 x i8]* @global_str.30, i32 0, i32 0), i8** %input, align 8
  %seen = alloca i32, align 4
  store i32 0, i32* %seen, align 4
  %printf = call i32 (i8*, ...) @printf(i8* getelementptr inbounds 
      ([4 x i8], [4 x i8]* @fmt.27, i32 0, i32 0), i8* getelementptr inbounds 
      ([65 x i8], [65 x i8]* @global_str.31, i32 0, i32 0))
  %printf4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds 
      ([4 x i8], [4 x i8]* @fmt.27, i32 0, i32 0), i8* getelementptr inbounds 
      ([74 x i8], [74 x i8]* @global_str.32, i32 0, i32 0))
  br label %while

while:                                            ; preds = %merge61, %entry
  %seen65 = load i32, i32* %seen, align 4
  %tmp66 = icmp ne i32 %seen65, 4
  br i1 %tmp66, label %while_body, label %merge67

while_body:                                       ; preds = %while
  %printf5 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds 
      ([3 x i8], [3 x i8]* @fmt.26, i32 0, i32 0), i8* getelementptr inbounds 
      ([77 x i8], [77 x i8]* @global_str.33, i32 0, i32 0))
  %readaline = call i8** (...) @readaline()
  %get_temp = load i8*, i8** %readaline, align 8
  store i8* %get_temp, i8** %input, align 8
  %input6 = load i8*, i8** %input, align 8
  %input7 = load i8*, i8** %input, align 8
  %streq = call i1 (i8*, i8*, ...) @streq(i8* %input7, i8* getelementptr 
      inbounds ([2 x i8], [2 x i8]* @global_str.35, i32 0, i32 0))
  br i1 %streq, label %then, label %else

merge:                                            ; preds = %merge15, %then
  %seen59 = load i32, i32* %seen, align 4
  %tmp60 = icmp slt i32 %seen59, 4
  br i1 %tmp60, label %then62, label %else64

then:                                             ; preds = %while_body
  %temp8 = load %FarmTour*, %FarmTour** %temp, align 8
  %vtable9 = getelementptr inbounds %FarmTour, %FarmTour* %temp8, i32 0, i32 0
  %vtable10 = load %FarmTour_vtable*, %FarmTour_vtable** %vtable9, align 8
  %fun_to_call = getelementptr inbounds %FarmTour_vtable, 
      %FarmTour_vtable* %vtable10, i32 0, i32 1
  %function = load void (%FarmTour**, %Farmer**)*, 
      void (%FarmTour**, %Farmer**)** %fun_to_call, align 8
  call void %function(%FarmTour** %temp, %Farmer** %bob)
  %seen11 = load i32, i32* %seen, align 4
  %tmp = add i32 %seen11, 1
  store i32 %tmp, i32* %seen, align 4
  br label %merge

else:                                             ; preds = %while_body
  %input12 = load i8*, i8** %input, align 8
  %input13 = load i8*, i8** %input, align 8
  %streq14 = call i1 (i8*, i8*, ...) @streq(i8* %input13, i8* getelementptr 
      inbounds ([3 x i8], [3 x i8]* @global_str.37, i32 0, i32 0))
  br i1 %streq14, label %then16, label %else24

merge15:                                          ; preds = %merge28, %then16
  br label %merge

then16:                                           ; preds = %else
  %temp17 = load %FarmTour*, %FarmTour** %temp, align 8
  %vtable18 = getelementptr inbounds %FarmTour, %FarmTour* %temp17, i32 0, i32 0
  %vtable19 = load %FarmTour_vtable*, %FarmTour_vtable** %vtable18, align 8
  %fun_to_call20 = getelementptr inbounds %FarmTour_vtable, 
      %FarmTour_vtable* %vtable19, i32 0, i32 2
  %function21 = load void (%FarmTour**, %Farmer**)*, 
      void (%FarmTour**, %Farmer**)** %fun_to_call20, align 8
  call void %function21(%FarmTour** %temp, %Farmer** %bob)
  %seen22 = load i32, i32* %seen, align 4
  %tmp23 = add i32 %seen22, 1
  store i32 %tmp23, i32* %seen, align 4
  br label %merge15

else24:                                           ; preds = %else
  %input25 = load i8*, i8** %input, align 8
  %input26 = load i8*, i8** %input, align 8
  %streq27 = call i1 (i8*, i8*, ...) @streq(i8* %input26, i8* getelementptr 
      inbounds ([2 x i8], [2 x i8]* @global_str.39, i32 0, i32 0))
  br i1 %streq27, label %then29, label %else37

merge28:                                          ; preds = %merge41, %then29
  br label %merge15

then29:                                           ; preds = %else24
  %temp30 = load %FarmTour*, %FarmTour** %temp, align 8
  %vtable31 = getelementptr inbounds %FarmTour, %FarmTour* %temp30, i32 0, i32 0
  %vtable32 = load %FarmTour_vtable*, %FarmTour_vtable** %vtable31, align 8
  %fun_to_call33 = getelementptr inbounds %FarmTour_vtable, 
      %FarmTour_vtable* %vtable32, i32 0, i32 3
  %function34 = load void (%FarmTour**, %Farmer**)*, 
      void (%FarmTour**, %Farmer**)** %fun_to_call33, align 8
  call void %function34(%FarmTour** %temp, %Farmer** %bob)
  %seen35 = load i32, i32* %seen, align 4
  %tmp36 = add i32 %seen35, 1
  store i32 %tmp36, i32* %seen, align 4
  br label %merge28

else37:                                           ; preds = %else24
  %input38 = load i8*, i8** %input, align 8
  %input39 = load i8*, i8** %input, align 8
  %streq40 = call i1 (i8*, i8*, ...) @streq(i8* %input39, i8* getelementptr 
      inbounds ([2 x i8], [2 x i8]* @global_str.41, i32 0, i32 0))
  br i1 %streq40, label %then42, label %else50

merge41:                                          ; preds = %merge54, %then42
  br label %merge28

then42:                                           ; preds = %else37
  %temp43 = load %FarmTour*, %FarmTour** %temp, align 8
  %vtable44 = getelementptr inbounds %FarmTour, %FarmTour* %temp43, i32 0, i32 0
  %vtable45 = load %FarmTour_vtable*, %FarmTour_vtable** %vtable44, align 8
  %fun_to_call46 = getelementptr inbounds %FarmTour_vtable, 
      %FarmTour_vtable* %vtable45, i32 0, i32 4
  %function47 = load void (%FarmTour**, %Farmer**)*, 
      void (%FarmTour**, %Farmer**)** %fun_to_call46, align 8
  call void %function47(%FarmTour** %temp, %Farmer** %bob)
  %seen48 = load i32, i32* %seen, align 4
  %tmp49 = add i32 %seen48, 1
  store i32 %tmp49, i32* %seen, align 4
  br label %merge41

else50:                                           ; preds = %else37
  %input51 = load i8*, i8** %input, align 8
  %input52 = load i8*, i8** %input, align 8
  %streq53 = call i1 (i8*, i8*, ...) @streq(i8* %input52, i8* getelementptr 
      inbounds ([2 x i8], [2 x i8]* @global_str.43, i32 0, i32 0))
  br i1 %streq53, label %then55, label %else57

merge54:                                          ; preds = %else57
  br label %merge41

then55:                                           ; preds = %else50
  %printf56 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds 
      ([4 x i8], [4 x i8]* @fmt.27, i32 0, i32 0), i8* getelementptr inbounds 
      ([47 x i8], [47 x i8]* @global_str.44, i32 0, i32 0))
  ret void

else57:                                           ; preds = %else50
  %printf58 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds 
      ([4 x i8], [4 x i8]* @fmt.27, i32 0, i32 0), i8* getelementptr inbounds 
      ([68 x i8], [68 x i8]* @global_str.45, i32 0, i32 0))
  br label %merge54

merge61:                                          ; preds = %else64, %then62
  br label %while

then62:                                           ; preds = %merge
  %printf63 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds 
      ([4 x i8], [4 x i8]* @fmt.27, i32 0, i32 0), i8* getelementptr inbounds 
      ([59 x i8], [59 x i8]* @global_str.46, i32 0, i32 0))
  br label %merge61

else64:                                           ; preds = %merge
  br label %merge61

merge67:                                          ; preds = %while
  %printf68 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds 
      ([4 x i8], [4 x i8]* @fmt.27, i32 0, i32 0), i8* getelementptr inbounds 
      ([84 x i8], [84 x i8]* @global_str.47, i32 0, i32 0))
  ret void
}

define void @FarmTour_seePig(%FarmTour** %0, %Farmer** %1) {
entry:
  %temp = alloca %FarmTour*, align 8
  %temp1 = load %FarmTour*, %FarmTour** %0, align 8
  store %FarmTour* %temp1, %FarmTour** %temp, align 8
  %temp2 = alloca %Farmer*, align 8
  %temp3 = load %Farmer*, %Farmer** %1, align 8
  store %Farmer* %temp3, %Farmer** %temp2, align 8
  %malloccall = tail call i8* @malloc(i32 ptrtoint (%Pig* getelementptr 
      (%Pig, %Pig* null, i32 1) to i32))
  %Pig = bitcast i8* %malloccall to %Pig*
  %vtable = getelementptr inbounds %Pig, %Pig* %Pig, i32 0, i32 0
  store %Pig_vtable* @Pig_vtable_data, %Pig_vtable** %vtable, align 8
  %temp4 = alloca %Pig*, align 8
  %num_permitted = getelementptr inbounds %Pig, %Pig* %Pig, i32 0, i32 1
  store i32 2, i32* %num_permitted, align 4
  %permit_list = getelementptr inbounds %Pig, %Pig* %Pig, i32 0, i32 2
  store [2 x i8*] [i8* getelementptr inbounds ([4 x i8], [4 x i8]* 
      @temp_str.51, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], 
      [7 x i8]* @temp_str.52, i32 0, i32 0)], [2 x i8*]* %permit_list, align 8
  store %Pig* %Pig, %Pig** %temp4, align 8
  %p = alloca %Pig*, align 8
  %temp5 = load %Pig*, %Pig** %temp4, align 8
  store %Pig* %temp5, %Pig** %p, align 8
  %input = alloca i8*, align 8
  store i8* getelementptr inbounds ([1 x i8], [1 x i8]* @global_str.53, i32 0, 
      i32 0), i8** %input, align 8
  %printf = call i32 (i8*, ...) @printf(i8* getelementptr inbounds 
      ([4 x i8], [4 x i8]* @fmt.49, i32 0, i32 0), i8* getelementptr inbounds 
      ([68 x i8], [68 x i8]* @global_str.54, i32 0, i32 0))
  %printf6 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds 
      ([4 x i8], [4 x i8]* @fmt.49, i32 0, i32 0), i8* getelementptr inbounds 
      ([65 x i8], [65 x i8]* @global_str.55, i32 0, i32 0))
  %printf7 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], 
      [3 x i8]* @fmt.48, i32 0, i32 0), i8* getelementptr inbounds ([35 x i8], 
      [35 x i8]* @global_str.56, i32 0, i32 0))
  %readaline = call i8** (...) @readaline()
  %get_temp = load i8*, i8** %readaline, align 8
  store i8* %get_temp, i8** %input, align 8
  %input8 = load i8*, i8** %input, align 8
  %input9 = load i8*, i8** %input, align 8
  %streq = call i1 (i8*, i8*, ...) @streq(i8* %input9, i8* getelementptr 
      inbounds ([2 x i8], [2 x i8]* @global_str.58, i32 0, i32 0))
  br i1 %streq, label %then, label %else

merge:                                            ; preds = %else, %then
  ret void

then:                                             ; preds = %entry
  %printf10 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], 
      [4 x i8]* @fmt.49, i32 0, i32 0), i8* getelementptr inbounds 
      ([23 x i8], [23 x i8]* @global_str.59, i32 0, i32 0))
  %temp11 = load %Pig*, %Pig** %p, align 8
  %vtable12 = getelementptr inbounds %Pig, %Pig* %temp11, i32 0, i32 0
  %vtable13 = load %Pig_vtable*, %Pig_vtable** %vtable12, align 8
  %fun_to_call = getelementptr inbounds %Pig_vtable, %Pig_vtable* %vtable13, 
      i32 0, i32 0
  %function = load void (%Animal**)*, void (%Animal**)** %fun_to_call, align 8
  %arg_cast = bitcast %Pig** %p to %Animal**
  call void %function(%Animal** %arg_cast)
  %printf14 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds 
      ([4 x i8], [4 x i8]* @fmt.49, i32 0, i32 0), i8* getelementptr inbounds 
      ([29 x i8], [29 x i8]* @global_str.60, i32 0, i32 0))
  br label %merge

else:                                             ; preds = %entry
  %printf15 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds 
      ([4 x i8], [4 x i8]* @fmt.49, i32 0, i32 0), i8* getelementptr inbounds 
      ([52 x i8], [52 x i8]* @global_str.61, i32 0, i32 0))
  %temp16 = load %Farmer*, %Farmer** %temp2, align 8
  %vtable17 = getelementptr inbounds %Farmer, %Farmer* %temp16, i32 0, i32 0
  %vtable18 = load %Farmer_vtable*, %Farmer_vtable** %vtable17, align 8
  %fun_to_call19 = getelementptr inbounds %Farmer_vtable, 
      %Farmer_vtable* %vtable18, i32 0, i32 2
  %function20 = load void (%Farmer**, %Animal**)*, 
      void (%Farmer**, %Animal**)** %fun_to_call19, align 8
  %arg_cast21 = bitcast %Pig** %p to %Animal**
  call void %function20(%Farmer** %temp2, %Animal** %arg_cast21)
  %printf22 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds 
      ([4 x i8], [4 x i8]* @fmt.49, i32 0, i32 0), i8* getelementptr inbounds 
      ([54 x i8], [54 x i8]* @global_str.62, i32 0, i32 0))
  br label %merge
}

define void @FarmTour_seeCow(%FarmTour** %0, %Farmer** %1) {
entry:
  %temp = alloca %FarmTour*, align 8
  %temp1 = load %FarmTour*, %FarmTour** %0, align 8
  store %FarmTour* %temp1, %FarmTour** %temp, align 8
  %temp2 = alloca %Farmer*, align 8
  %temp3 = load %Farmer*, %Farmer** %1, align 8
  store %Farmer* %temp3, %Farmer** %temp2, align 8
  %malloccall = tail call i8* @malloc(i32 ptrtoint (%Cow* getelementptr 
      (%Cow, %Cow* null, i32 1) to i32))
  %Cow = bitcast i8* %malloccall to %Cow*
  %vtable = getelementptr inbounds %Cow, %Cow* %Cow, i32 0, i32 0
  store %Cow_vtable* @Cow_vtable_data, %Cow_vtable** %vtable, align 8
  %temp4 = alloca %Cow*, align 8
  %num_permitted = getelementptr inbounds %Cow, %Cow* %Cow, i32 0, i32 1
  store i32 2, i32* %num_permitted, align 4
  %permit_list = getelementptr inbounds %Cow, %Cow* %Cow, i32 0, i32 2
  store [2 x i8*] [i8* getelementptr inbounds ([4 x i8], [4 x i8]* 
      @temp_str.66, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], 
      [7 x i8]* @temp_str.67, i32 0, i32 0)], [2 x i8*]* %permit_list, align 8
  store %Cow* %Cow, %Cow** %temp4, align 8
  %c = alloca %Cow*, align 8
  %temp5 = load %Cow*, %Cow** %temp4, align 8
  store %Cow* %temp5, %Cow** %c, align 8
  %input = alloca i8*, align 8
  store i8* getelementptr inbounds ([1 x i8], [1 x i8]* @global_str.68, 
      i32 0, i32 0), i8** %input, align 8
  %printf = call i32 (i8*, ...) @printf(i8* getelementptr inbounds 
      ([4 x i8], [4 x i8]* @fmt.64, i32 0, i32 0), i8* getelementptr inbounds 
      ([68 x i8], [68 x i8]* @global_str.69, i32 0, i32 0))
  %printf6 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds 
      ([4 x i8], [4 x i8]* @fmt.64, i32 0, i32 0), i8* getelementptr inbounds 
      ([69 x i8], [69 x i8]* @global_str.70, i32 0, i32 0))
  %printf7 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds 
      ([3 x i8], [3 x i8]* @fmt.63, i32 0, i32 0), i8* getelementptr inbounds 
      ([35 x i8], [35 x i8]* @global_str.71, i32 0, i32 0))
  %readaline = call i8** (...) @readaline()
  %get_temp = load i8*, i8** %readaline, align 8
  store i8* %get_temp, i8** %input, align 8
  %input8 = load i8*, i8** %input, align 8
  %input9 = load i8*, i8** %input, align 8
  %streq = call i1 (i8*, i8*, ...) @streq(i8* %input9, i8* getelementptr 
      inbounds ([2 x i8], [2 x i8]* @global_str.73, i32 0, i32 0))
  br i1 %streq, label %then, label %else

merge:                                            ; preds = %else, %then
  ret void

then:                                             ; preds = %entry
  %printf10 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds 
      ([4 x i8], [4 x i8]* @fmt.64, i32 0, i32 0), i8* getelementptr inbounds 
      ([23 x i8], [23 x i8]* @global_str.74, i32 0, i32 0))
  %temp11 = load %Cow*, %Cow** %c, align 8
  %vtable12 = getelementptr inbounds %Cow, %Cow* %temp11, i32 0, i32 0
  %vtable13 = load %Cow_vtable*, %Cow_vtable** %vtable12, align 8
  %fun_to_call = getelementptr inbounds %Cow_vtable, %Cow_vtable* %vtable13, 
      i32 0, i32 0
  %function = load void (%Animal**)*, void (%Animal**)** %fun_to_call, align 8
  %arg_cast = bitcast %Cow** %c to %Animal**
  call void %function(%Animal** %arg_cast)
  %printf14 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds 
      ([4 x i8], [4 x i8]* @fmt.64, i32 0, i32 0), i8* getelementptr inbounds 
      ([29 x i8], [29 x i8]* @global_str.75, i32 0, i32 0))
  br label %merge

else:                                             ; preds = %entry
  %printf15 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds 
      ([4 x i8], [4 x i8]* @fmt.64, i32 0, i32 0), i8* getelementptr inbounds 
      ([52 x i8], [52 x i8]* @global_str.76, i32 0, i32 0))
  %temp16 = load %Farmer*, %Farmer** %temp2, align 8
  %vtable17 = getelementptr inbounds %Farmer, %Farmer* %temp16, i32 0, i32 0
  %vtable18 = load %Farmer_vtable*, %Farmer_vtable** %vtable17, align 8
  %fun_to_call19 = getelementptr inbounds %Farmer_vtable, 
      %Farmer_vtable* %vtable18, i32 0, i32 2
  %function20 = load void (%Farmer**, %Animal**)*, 
      void (%Farmer**, %Animal**)** %fun_to_call19, align 8
  %arg_cast21 = bitcast %Cow** %c to %Animal**
  call void %function20(%Farmer** %temp2, %Animal** %arg_cast21)
  %printf22 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds 
      ([4 x i8], [4 x i8]* @fmt.64, i32 0, i32 0), i8* getelementptr inbounds 
      ([54 x i8], [54 x i8]* @global_str.77, i32 0, i32 0))
  br label %merge
}

define void @FarmTour_seeDuck(%FarmTour** %0, %Farmer** %1) {
entry:
  %temp = alloca %FarmTour*, align 8
  %temp1 = load %FarmTour*, %FarmTour** %0, align 8
  store %FarmTour* %temp1, %FarmTour** %temp, align 8
  %temp2 = alloca %Farmer*, align 8
  %temp3 = load %Farmer*, %Farmer** %1, align 8
  store %Farmer* %temp3, %Farmer** %temp2, align 8
  %malloccall = tail call i8* @malloc(i32 ptrtoint (%Duck* getelementptr 
      (%Duck, %Duck* null, i32 1) to i32))
  %Duck = bitcast i8* %malloccall to %Duck*
  %vtable = getelementptr inbounds %Duck, %Duck* %Duck, i32 0, i32 0
  store %Duck_vtable* @Duck_vtable_data, %Duck_vtable** %vtable, align 8
  %temp4 = alloca %Duck*, align 8
  %num_permitted = getelementptr inbounds %Duck, %Duck* %Duck, i32 0, i32 1
  store i32 3, i32* %num_permitted, align 4
  %permit_list = getelementptr inbounds %Duck, %Duck* %Duck, i32 0, i32 2
  store [3 x i8*] [i8* getelementptr inbounds ([5 x i8], 
      [5 x i8]* @temp_str.81, i32 0, i32 0), i8* getelementptr inbounds 
      ([7 x i8], [7 x i8]* @temp_str.82, i32 0, i32 0), i8* getelementptr 
      inbounds ([9 x i8], [9 x i8]* @temp_str.83, i32 0, i32 0)], 
      [3 x i8*]* %permit_list, align 8
  store %Duck* %Duck, %Duck** %temp4, align 8
  %d = alloca %Duck*, align 8
  %temp5 = load %Duck*, %Duck** %temp4, align 8
  store %Duck* %temp5, %Duck** %d, align 8
  %input = alloca i8*, align 8
  store i8* getelementptr inbounds ([1 x i8], [1 x i8]* 
      @global_str.84, i32 0, i32 0), i8** %input, align 8
  %printf = call i32 (i8*, ...) @printf(i8* getelementptr inbounds 
      ([4 x i8], [4 x i8]* @fmt.79, i32 0, i32 0), i8* getelementptr inbounds 
      ([69 x i8], [69 x i8]* @global_str.85, i32 0, i32 0))
  %printf6 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds 
      ([4 x i8], [4 x i8]* @fmt.79, i32 0, i32 0), i8* getelementptr inbounds 
      ([52 x i8], [52 x i8]* @global_str.86, i32 0, i32 0))
  %printf7 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds 
      ([3 x i8], [3 x i8]* @fmt.78, i32 0, i32 0), i8* getelementptr inbounds 
      ([36 x i8], [36 x i8]* @global_str.87, i32 0, i32 0))
  %readaline = call i8** (...) @readaline()
  %get_temp = load i8*, i8** %readaline, align 8
  store i8* %get_temp, i8** %input, align 8
  %temp8 = load %Duck*, %Duck** %d, align 8
  %permit_length_ptr = getelementptr inbounds %Duck, %Duck* %temp8, i32 0, i32 1
  %permit_length = load i32, i32* %permit_length_ptr, align 4
  %permit_list_ptr = getelementptr inbounds %Duck, %Duck* %temp8, i32 0, i32 2
  %str_ptr = getelementptr [3 x i8*], [3 x i8*]* %permit_list_ptr, i32 0, i32 0
  call void (i8*, i8**, i32, ...) @class_permitted(i8* getelementptr inbounds 
      ([9 x i8], [9 x i8]* @class_location.88, i32 0, i32 0), 
      i8** %str_ptr, i32 %permit_length)
  %vtable9 = getelementptr inbounds %Duck, %Duck* %temp8, i32 0, i32 0
  %vtable10 = load %Duck_vtable*, %Duck_vtable** %vtable9, align 8
  %fun_to_call = getelementptr inbounds %Duck_vtable, %Duck_vtable* %vtable10, 
      i32 0, i32 1
  %function = load void (%Duck**)*, void (%Duck**)** %fun_to_call, align 8
  call void %function(%Duck** %d)
  %input11 = load i8*, i8** %input, align 8
  %input12 = load i8*, i8** %input, align 8
  %streq = call i1 (i8*, i8*, ...) @streq(i8* %input12, i8* getelementptr 
      inbounds ([2 x i8], [2 x i8]* @global_str.90, i32 0, i32 0))
  br i1 %streq, label %then, label %else

merge:                                            ; preds = %else, %then
  ret void

then:                                             ; preds = %entry
  %printf13 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds 
      ([4 x i8], [4 x i8]* @fmt.79, i32 0, i32 0), i8* getelementptr inbounds 
      ([24 x i8], [24 x i8]* @global_str.91, i32 0, i32 0))
  %temp14 = load %Duck*, %Duck** %d, align 8
  %permit_length_ptr15 = getelementptr inbounds %Duck, %Duck* %temp14, i32 0, 
      i32 1
  %permit_length16 = load i32, i32* %permit_length_ptr15, align 4
  %permit_list_ptr17 = getelementptr inbounds %Duck, %Duck* %temp14, i32 0, 
      i32 2
  %str_ptr18 = getelementptr [3 x i8*], [3 x i8*]* %permit_list_ptr17, i32 0, 
      i32 0
  call void (i8*, i8**, i32, ...) @class_permitted(i8* getelementptr inbounds 
      ([9 x i8], [9 x i8]* @class_location.92, i32 0, i32 0), i8** %str_ptr18, 
      i32 %permit_length16)
  %vtable19 = getelementptr inbounds %Duck, %Duck* %temp14, i32 0, i32 0
  %vtable20 = load %Duck_vtable*, %Duck_vtable** %vtable19, align 8
  %fun_to_call21 = getelementptr inbounds %Duck_vtable, %Duck_vtable* %vtable20,
      i32 0, i32 1
  %function22 = load void (%Duck**)*, void (%Duck**)** %fun_to_call21, align 8
  call void %function22(%Duck** %d)
  %printf23 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds 
      ([4 x i8], [4 x i8]* @fmt.79, i32 0, i32 0), i8* getelementptr inbounds 
      ([48 x i8], [48 x i8]* @global_str.93, i32 0, i32 0))
  br label %merge

else:                                             ; preds = %entry
  %printf24 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds 
      ([4 x i8], [4 x i8]* @fmt.79, i32 0, i32 0), i8* getelementptr inbounds 
      ([54 x i8], [54 x i8]* @global_str.94, i32 0, i32 0))
  %temp25 = load %Farmer*, %Farmer** %temp2, align 8
  %vtable26 = getelementptr inbounds %Farmer, %Farmer* %temp25, i32 0, i32 0
  %vtable27 = load %Farmer_vtable*, %Farmer_vtable** %vtable26, align 8
  %fun_to_call28 = getelementptr inbounds %Farmer_vtable, %Farmer_vtable* 
      %vtable27, i32 0, i32 2
  %function29 = load void (%Farmer**, %Animal**)*, 
      void (%Farmer**, %Animal**)** %fun_to_call28, align 8
  %arg_cast = bitcast %Duck** %d to %Animal**
  call void %function29(%Farmer** %temp2, %Animal** %arg_cast)
  %printf30 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds 
      ([4 x i8], [4 x i8]* @fmt.79, i32 0, i32 0), i8* getelementptr inbounds 
      ([44 x i8], [44 x i8]* @global_str.95, i32 0, i32 0))
  br label %merge
}

define void @FarmTour_seeSheep(%FarmTour** %0, %Farmer** %1) {
entry:
  %temp = alloca %FarmTour*, align 8
  %temp1 = load %FarmTour*, %FarmTour** %0, align 8
  store %FarmTour* %temp1, %FarmTour** %temp, align 8
  %temp2 = alloca %Farmer*, align 8
  %temp3 = load %Farmer*, %Farmer** %1, align 8
  store %Farmer* %temp3, %Farmer** %temp2, align 8
  %malloccall = tail call i8* @malloc(i32 ptrtoint (%Sheep* getelementptr 
      (%Sheep, %Sheep* null, i32 1) to i32))
  %Sheep = bitcast i8* %malloccall to %Sheep*
  %vtable = getelementptr inbounds %Sheep, %Sheep* %Sheep, i32 0, i32 0
  store %Sheep_vtable* @Sheep_vtable_data, %Sheep_vtable** %vtable, align 8
  %temp4 = alloca %Sheep*, align 8
  %num_permitted = getelementptr inbounds %Sheep, %Sheep* %Sheep, i32 0, i32 1
  store i32 2, i32* %num_permitted, align 4
  %permit_list = getelementptr inbounds %Sheep, %Sheep* %Sheep, i32 0, i32 2
  store [2 x i8*] [i8* getelementptr inbounds ([6 x i8], [6 x i8]* @temp_str.99,
      i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* 
      @temp_str.100, i32 0, i32 0)], [2 x i8*]* %permit_list, align 8
  store %Sheep* %Sheep, %Sheep** %temp4, align 8
  %s = alloca %Sheep*, align 8
  %temp5 = load %Sheep*, %Sheep** %temp4, align 8
  store %Sheep* %temp5, %Sheep** %s, align 8
  %input = alloca i8*, align 8
  store i8* getelementptr inbounds ([1 x i8], [1 x i8]* @global_str.101, i32 0, 
      i32 0), i8** %input, align 8
  %printf = call i32 (i8*, ...) @printf(i8* getelementptr inbounds 
      ([4 x i8], [4 x i8]* @fmt.97, i32 0, i32 0), i8* getelementptr inbounds 
      ([70 x i8], [70 x i8]* @global_str.102, i32 0, i32 0))
  %printf6 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds 
      ([4 x i8], [4 x i8]* @fmt.97, i32 0, i32 0), i8* getelementptr inbounds 
      ([75 x i8], [75 x i8]* @global_str.103, i32 0, i32 0))
  %printf7 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds 
      ([3 x i8], [3 x i8]* @fmt.96, i32 0, i32 0), i8* getelementptr inbounds 
      ([37 x i8], [37 x i8]* @global_str.104, i32 0, i32 0))
  %readaline = call i8** (...) @readaline()
  %get_temp = load i8*, i8** %readaline, align 8
  store i8* %get_temp, i8** %input, align 8
  %input8 = load i8*, i8** %input, align 8
  %input9 = load i8*, i8** %input, align 8
  %streq = call i1 (i8*, i8*, ...) @streq(i8* %input9, i8* getelementptr 
      inbounds ([2 x i8], [2 x i8]* @global_str.106, i32 0, i32 0))
  br i1 %streq, label %then, label %else

merge:                                            ; preds = %else, %then
  ret void

then:                                             ; preds = %entry
  %printf10 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds 
      ([4 x i8], [4 x i8]* @fmt.97, i32 0, i32 0), i8* getelementptr inbounds 
      ([25 x i8], [25 x i8]* @global_str.107, i32 0, i32 0))
  %temp11 = load %Sheep*, %Sheep** %s, align 8
  %vtable12 = getelementptr inbounds %Sheep, %Sheep* %temp11, i32 0, i32 0
  %vtable13 = load %Sheep_vtable*, %Sheep_vtable** %vtable12, align 8
  %fun_to_call = getelementptr inbounds %Sheep_vtable, %Sheep_vtable* %vtable13,
      i32 0, i32 0
  %function = load void (%Animal**)*, void (%Animal**)** %fun_to_call, align 8
  %arg_cast = bitcast %Sheep** %s to %Animal**
  call void %function(%Animal** %arg_cast)
  %printf14 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds 
      ([4 x i8], [4 x i8]* @fmt.97, i32 0, i32 0), i8* getelementptr inbounds 
      ([31 x i8], [31 x i8]* @global_str.108, i32 0, i32 0))
  br label %merge

else:                                             ; preds = %entry
  %printf15 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds 
      ([4 x i8], [4 x i8]* @fmt.97, i32 0, i32 0), i8* getelementptr inbounds 
      ([56 x i8], [56 x i8]* @global_str.109, i32 0, i32 0))
  %temp16 = load %Farmer*, %Farmer** %temp2, align 8
  %vtable17 = getelementptr inbounds %Farmer, %Farmer* %temp16, i32 0, i32 0
  %vtable18 = load %Farmer_vtable*, %Farmer_vtable** %vtable17, align 8
  %fun_to_call19 = getelementptr inbounds %Farmer_vtable, 
      %Farmer_vtable* %vtable18, i32 0, i32 2
  %function20 = load void (%Farmer**, %Animal**)*, 
      void (%Farmer**, %Animal**)** %fun_to_call19, align 8
  %arg_cast21 = bitcast %Sheep** %s to %Animal**
  call void %function20(%Farmer** %temp2, %Animal** %arg_cast21)
  %printf22 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds 
      ([4 x i8], [4 x i8]* @fmt.97, i32 0, i32 0), i8* getelementptr inbounds 
      ([40 x i8], [40 x i8]* @global_str.110, i32 0, i32 0))
  br label %merge
}

declare noalias i8* @malloc(i32)

define i32 @main() {
entry:
  %malloccall = tail call i8* @malloc(i32 ptrtoint (%FarmTour* getelementptr 
      (%FarmTour, %FarmTour* null, i32 1) to i32))
  %FarmTour = bitcast i8* %malloccall to %FarmTour*
  %vtable = getelementptr inbounds %FarmTour, %FarmTour* %FarmTour, i32 0, i32 0
  store %FarmTour_vtable* @FarmTour_vtable_data, %FarmTour_vtable** %vtable, 
      align 8
  %temp = alloca %FarmTour*, align 8
  %num_permitted = getelementptr inbounds %FarmTour, %FarmTour* %FarmTour, 
      i32 0, i32 1
  store i32 2, i32* %num_permitted, align 4
  %permit_list = getelementptr inbounds %FarmTour, %FarmTour* %FarmTour, 
      i32 0, i32 2
  store [2 x i8*] [i8* getelementptr inbounds ([9 x i8], [9 x i8]* 
      @temp_str.114, i32 0, i32 0), i8* getelementptr inbounds 
      ([5 x i8], [5 x i8]* @temp_str.115, i32 0, i32 0)], 
      [2 x i8*]* %permit_list, align 8
  store %FarmTour* %FarmTour, %FarmTour** %temp, align 8
  %ft = alloca %FarmTour*, align 8
  %temp1 = load %FarmTour*, %FarmTour** %temp, align 8
  store %FarmTour* %temp1, %FarmTour** %ft, align 8
  %temp2 = load %FarmTour*, %FarmTour** %ft, align 8
  %vtable3 = getelementptr inbounds %FarmTour, %FarmTour* %temp2, i32 0, i32 0
  %vtable4 = load %FarmTour_vtable*, %FarmTour_vtable** %vtable3, align 8
  %fun_to_call = getelementptr inbounds %FarmTour_vtable, 
      %FarmTour_vtable* %vtable4, i32 0, i32 0
  %function = load void (%FarmTour**)*, void (%FarmTour**)** %fun_to_call, 
      align 8
  call void %function(%FarmTour** %ft)
  ret i32 0
}
