# README: Iris Compiler

Ayda Aricanli              ayda.aricanli@tufts.edu
Trevor Sullivan            trevor.sullivan@tufts.edu
Tim Valk                   timothy.valk@tufts.edu
Valerie Zhang              valerie.zhang@tufts.edu
Josh Kim                   joshua.kim634361@tufts.edu

# How to compile and execute

After downloading and unzipping the zip file, run 'make' in terminal. Building
Iris requires the same environment as MicroC.

# How to run test script

To run the shell script, run './testsyntax.sh' in terminal.

# What needs to be added

We will possibly add syntactic sugar for list indexing. This would add an
option to access lists like `dogs[0]` in addition to `dogs.get(0)`. This may 
also be extended to multi-dimensional lists. 

We also haven't decided on how we are getting the types for lists "under the 
hood"–– whether we will make the user pass in the type or if we will implement 
type inference for the List module. Our LRM uses a version of List<String> 
syntax, but it has not been implemented in our compiler yet. Right now, the 
compiler is set up for the type inference option (which would assume the list
type is that of the first element). 

We are still debating between some of these syntactic options, but want to make
a final decision based on how our semantics end up working.
 
List<String> strlist = new List<String>();
List<String> strlist = new List(String, ...);
List<String> strlist = ["hi"];
List strlist = new List(String, ...); 
