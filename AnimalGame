; ModuleID = 'Iris'
source_filename = "Iris"

%Object_vtable = type {}
%Animal_vtable = type { void (%Animal**, i8*)*, void (%Animal**, i8*)*, 
    void (%Animal**, i32)*, void (%Animal**, i1)*, void (%Animal**, i1)*, 
    i8* (%Animal**)*, i8* (%Animal**)*, i32 (%Animal**)*, i1 (%Animal**)*, 
    i1 (%Animal**)*, void (%Animal**)*, void (%Animal**)* }
%Animal = type { %Animal_vtable*, i32, [2 x i8*], i8*, i8*, i32, i1, i1 }
%Cat_vtable = type { void (%Animal**, i8*)*, void (%Animal**, i8*)*, 
    void (%Animal**, i32)*, void (%Animal**, i1)*, void (%Animal**, i1)*, 
    i8* (%Animal**)*, i8* (%Animal**)*, i32 (%Animal**)*, i1 (%Animal**)*, 
    i1 (%Animal**)*, void (%Cat**)*, void (%Cat**)* }
%Cat = type { %Cat_vtable*, i32, [1 x i8*], i8*, i8*, i32, i1, i1 }
%Dog_vtable = type { void (%Animal**, i8*)*, void (%Animal**, i8*)*, 
    void (%Animal**, i32)*, void (%Animal**, i1)*, void (%Animal**, i1)*, 
    i8* (%Animal**)*, i8* (%Animal**)*, i32 (%Animal**)*, i1 (%Animal**)*, 
    i1 (%Animal**)*, void (%Dog**)*, void (%Dog**)* }
%Dog = type { %Dog_vtable*, i32, [1 x i8*], i8*, i8*, i32, i1, i1 }
%Chicken_vtable = type { void (%Animal**, i8*)*, void (%Animal**, i8*)*, 
    void (%Animal**, i32)*, void (%Animal**, i1)*, void (%Animal**, i1)*, 
    i8* (%Animal**)*, i8* (%Animal**)*, i32 (%Animal**)*, i1 (%Animal**)*, 
    i1 (%Animal**)*, void (%Chicken**)*, void (%Chicken**)* }
%Chicken = type { %Chicken_vtable*, i32, [1 x i8*], i8*, i8*, i32, i1, i1 }
%Snake_vtable = type { void (%Animal**, i8*)*, void (%Animal**, i8*)*, 
    void (%Animal**, i32)*, void (%Animal**, i1)*, void (%Animal**, i1)*, 
    i8* (%Animal**)*, i8* (%Animal**)*, i32 (%Animal**)*, i1 (%Animal**)*, 
    i1 (%Animal**)*, void (%Snake**)*, void (%Snake**)* }
%Snake = type { %Snake_vtable*, i32, [1 x i8*], i8*, i8*, i32, i1, i1 }
%Frog_vtable = type { void (%Animal**, i8*)*, void (%Animal**, i8*)*, 
    void (%Animal**, i32)*, void (%Animal**, i1)*, void (%Animal**, i1)*, 
    i8* (%Animal**)*, i8* (%Animal**)*, i32 (%Animal**)*, i1 (%Animal**)*, 
    i1 (%Animal**)*, void (%Frog**)*, void (%Frog**)* }
%Frog = type { %Frog_vtable*, i32, [1 x i8*], i8*, i8*, i32, i1, i1 }
%Bee_vtable = type { void (%Animal**, i8*)*, void (%Animal**, i8*)*, 
    void (%Animal**, i32)*, void (%Animal**, i1)*, void (%Animal**, i1)*, 
    i8* (%Animal**)*, i8* (%Animal**)*, i32 (%Animal**)*, i1 (%Animal**)*, 
    i1 (%Animal**)*, void (%Bee**)*, void (%Bee**)* }
%Bee = type { %Bee_vtable*, i32, [1 x i8*], i8*, i8*, i32, i1, i1 }
%Richard_vtable = type { void (%Animal**, i8*)*, void (%Animal**, i8*)*, 
    void (%Animal**, i32)*, void (%Animal**, i1)*, void (%Animal**, i1)*, 
    i8* (%Animal**)*, i8* (%Animal**)*, i32 (%Animal**)*, i1 (%Animal**)*, 
    i1 (%Animal**)*, void (%Richard**)*, void (%Richard**)* }
%Richard = type { %Richard_vtable*, i32, [1 x i8*], i8*, i8*, i32, i1, i1 }
%AnimalGame_vtable = type { void (%AnimalGame**)*, %Animal** (%AnimalGame**, i8*)*, 
    i1 (%AnimalGame**, %Animal**, i32)*, void (%AnimalGame**, %Animal**)* }
%AnimalGame = type { %AnimalGame_vtable*, i32, [1 x i8*] }
%Main_vtable = type { i32 ()* }

@Object_vtable_data = global %Object_vtable zeroinitializer
@fmt = private unnamed_addr constant [3 x i8] c"%s\00", align 1
@fmt.1 = private unnamed_addr constant [4 x i8] c"%s\0A\00", align 1
@fmt.2 = private unnamed_addr constant [3 x i8] c"%d\00", align 1
@fmt.3 = private unnamed_addr constant [3 x i8] c"%s\00", align 1
@fmt.4 = private unnamed_addr constant [4 x i8] c"%s\0A\00", align 1
@fmt.5 = private unnamed_addr constant [3 x i8] c"%d\00", align 1
@fmt.6 = private unnamed_addr constant [3 x i8] c"%s\00", align 1
@fmt.7 = private unnamed_addr constant [4 x i8] c"%s\0A\00", align 1
@fmt.8 = private unnamed_addr constant [3 x i8] c"%d\00", align 1
@fmt.9 = private unnamed_addr constant [3 x i8] c"%s\00", align 1
@fmt.10 = private unnamed_addr constant [4 x i8] c"%s\0A\00", align 1
@fmt.11 = private unnamed_addr constant [3 x i8] c"%d\00", align 1
@fmt.12 = private unnamed_addr constant [3 x i8] c"%s\00", align 1
@fmt.13 = private unnamed_addr constant [4 x i8] c"%s\0A\00", align 1
@fmt.14 = private unnamed_addr constant [3 x i8] c"%d\00", align 1
@fmt.15 = private unnamed_addr constant [3 x i8] c"%s\00", align 1
@fmt.16 = private unnamed_addr constant [4 x i8] c"%s\0A\00", align 1
@fmt.17 = private unnamed_addr constant [3 x i8] c"%d\00", align 1
@fmt.18 = private unnamed_addr constant [3 x i8] c"%s\00", align 1
@fmt.19 = private unnamed_addr constant [4 x i8] c"%s\0A\00", align 1
@fmt.20 = private unnamed_addr constant [3 x i8] c"%d\00", align 1
@fmt.21 = private unnamed_addr constant [3 x i8] c"%s\00", align 1
@fmt.22 = private unnamed_addr constant [4 x i8] c"%s\0A\00", align 1
@fmt.23 = private unnamed_addr constant [3 x i8] c"%d\00", align 1
@fmt.24 = private unnamed_addr constant [3 x i8] c"%s\00", align 1
@fmt.25 = private unnamed_addr constant [4 x i8] c"%s\0A\00", align 1
@fmt.26 = private unnamed_addr constant [3 x i8] c"%d\00", align 1
@fmt.27 = private unnamed_addr constant [3 x i8] c"%s\00", align 1
@fmt.28 = private unnamed_addr constant [4 x i8] c"%s\0A\00", align 1
@fmt.29 = private unnamed_addr constant [3 x i8] c"%d\00", align 1
@fmt.30 = private unnamed_addr constant [3 x i8] c"%s\00", align 1
@fmt.31 = private unnamed_addr constant [4 x i8] c"%s\0A\00", align 1
@fmt.32 = private unnamed_addr constant [3 x i8] c"%d\00", align 1
@global_str = private unnamed_addr constant [6 x i8] c"Noise\00", align 1
@fmt.33 = private unnamed_addr constant [3 x i8] c"%s\00", align 1
@fmt.34 = private unnamed_addr constant [4 x i8] c"%s\0A\00", align 1
@fmt.35 = private unnamed_addr constant [3 x i8] c"%d\00", align 1
@global_str.36 = private unnamed_addr constant [89 x i8] 
    c"There are 5 different animal classes: Mammals, Birds, Insects, 
    Amphibians, and Reptiles!\00", align 1
@Animal_vtable_data = global %Animal_vtable { void (%Animal**, i8*)* @Animal_setAnimal, 
    void (%Animal**, i8*)* @Animal_setType, void (%Animal**, i32)* @Animal_setLegs, 
    void (%Animal**, i1)* @Animal_setFur, void (%Animal**, i1)* @Animal_setFly, 
    i8* (%Animal**)* @Animal_getClass, i8* (%Animal**)* @Animal_getType, 
    i32 (%Animal**)* @Animal_numLegs, i1 (%Animal**)* @Animal_hasFur, 
    i1 (%Animal**)* @Animal_canFly, void (%Animal**)* @Animal_noise, 
    void (%Animal**)* @Animal_funFact }
@fmt.37 = private unnamed_addr constant [3 x i8] c"%s\00", align 1
@fmt.38 = private unnamed_addr constant [4 x i8] c"%s\0A\00", align 1
@fmt.39 = private unnamed_addr constant [3 x i8] c"%d\00", align 1
@global_str.40 = private unnamed_addr constant [6 x i8] c"Meow!\00", align 1
@fmt.41 = private unnamed_addr constant [3 x i8] c"%s\00", align 1
@fmt.42 = private unnamed_addr constant [4 x i8] c"%s\0A\00", align 1
@fmt.43 = private unnamed_addr constant [3 x i8] c"%d\00", align 1
@global_str.44 = private unnamed_addr constant [25 x i8] 
    c"I can land on all fours!\00", align 1
@Cat_vtable_data = global %Cat_vtable { void (%Animal**, i8*)* @Animal_setAnimal, 
    void (%Animal**, i8*)* @Animal_setType, void (%Animal**, i32)* @Animal_setLegs, 
    void (%Animal**, i1)* @Animal_setFur, void (%Animal**, i1)* @Animal_setFly, 
    i8* (%Animal**)* @Animal_getClass, i8* (%Animal**)* @Animal_getType, 
    i32 (%Animal**)* @Animal_numLegs, i1 (%Animal**)* @Animal_hasFur, 
    i1 (%Animal**)* @Animal_canFly, void (%Cat**)* @Cat_noise, 
    void (%Cat**)* @Cat_funFact }
@fmt.45 = private unnamed_addr constant [3 x i8] c"%s\00", align 1
@fmt.46 = private unnamed_addr constant [4 x i8] c"%s\0A\00", align 1
@fmt.47 = private unnamed_addr constant [3 x i8] c"%d\00", align 1
@global_str.48 = private unnamed_addr constant [6 x i8] c"Bark!\00", align 1
@fmt.49 = private unnamed_addr constant [3 x i8] c"%s\00", align 1
@fmt.50 = private unnamed_addr constant [4 x i8] c"%s\0A\00", align 1
@fmt.51 = private unnamed_addr constant [3 x i8] c"%d\00", align 1
@global_str.52 = private unnamed_addr constant [31 x i8] 
    c"I have a great sense of smell!\00", align 1
@Dog_vtable_data = global %Dog_vtable { void (%Animal**, i8*)* @Animal_setAnimal, 
    void (%Animal**, i8*)* @Animal_setType, void (%Animal**, i32)* @Animal_setLegs, 
    void (%Animal**, i1)* @Animal_setFur, void (%Animal**, i1)* @Animal_setFly, 
    i8* (%Animal**)* @Animal_getClass, i8* (%Animal**)* @Animal_getType, 
    i32 (%Animal**)* @Animal_numLegs, i1 (%Animal**)* @Animal_hasFur, 
    i1 (%Animal**)* @Animal_canFly, void (%Dog**)* @Dog_noise, 
    void (%Dog**)* @Dog_funFact }
@fmt.53 = private unnamed_addr constant [3 x i8] c"%s\00", align 1
@fmt.54 = private unnamed_addr constant [4 x i8] c"%s\0A\00", align 1
@fmt.55 = private unnamed_addr constant [3 x i8] c"%d\00", align 1
@global_str.56 = private unnamed_addr constant [7 x i8] c"Cluck!\00", align 1
@fmt.57 = private unnamed_addr constant [3 x i8] c"%s\00", align 1
@fmt.58 = private unnamed_addr constant [4 x i8] c"%s\0A\00", align 1
@fmt.59 = private unnamed_addr constant [3 x i8] c"%d\00", align 1
@global_str.60 = private unnamed_addr constant [57 x i8] 
    c"I am one of the closest living descendants to dinosaurs!\00", align 1
@Chicken_vtable_data = global %Chicken_vtable { void (%Animal**, i8*)* @Animal_setAnimal, 
    void (%Animal**, i8*)* @Animal_setType, void (%Animal**, i32)* @Animal_setLegs, 
    void (%Animal**, i1)* @Animal_setFur, void (%Animal**, i1)* @Animal_setFly, 
    i8* (%Animal**)* @Animal_getClass, i8* (%Animal**)* @Animal_getType, 
    i32 (%Animal**)* @Animal_numLegs, i1 (%Animal**)* @Animal_hasFur, 
    i1 (%Animal**)* @Animal_canFly, void (%Chicken**)* @Chicken_noise, 
    void (%Chicken**)* @Chicken_funFact }
@fmt.61 = private unnamed_addr constant [3 x i8] c"%s\00", align 1
@fmt.62 = private unnamed_addr constant [4 x i8] c"%s\0A\00", align 1
@fmt.63 = private unnamed_addr constant [3 x i8] c"%d\00", align 1
@global_str.64 = private unnamed_addr constant [6 x i8] c"Hiss!\00", align 1
@fmt.65 = private unnamed_addr constant [3 x i8] c"%s\00", align 1
@fmt.66 = private unnamed_addr constant [4 x i8] c"%s\0A\00", align 1
@fmt.67 = private unnamed_addr constant [3 x i8] c"%d\00", align 1
@global_str.68 = private unnamed_addr constant [24 x i8] 
    c"I can be very venomous!\00", align 1
@Snake_vtable_data = global %Snake_vtable { void (%Animal**, i8*)* @Animal_setAnimal, 
    void (%Animal**, i8*)* @Animal_setType, void (%Animal**, i32)* @Animal_setLegs, 
    void (%Animal**, i1)* @Animal_setFur, void (%Animal**, i1)* @Animal_setFly, 
    i8* (%Animal**)* @Animal_getClass, i8* (%Animal**)* @Animal_getType, 
    i32 (%Animal**)* @Animal_numLegs, i1 (%Animal**)* @Animal_hasFur, 
    i1 (%Animal**)* @Animal_canFly, void (%Snake**)* @Snake_noise, 
    void (%Snake**)* @Snake_funFact }
@fmt.69 = private unnamed_addr constant [3 x i8] c"%s\00", align 1
@fmt.70 = private unnamed_addr constant [4 x i8] c"%s\0A\00", align 1
@fmt.71 = private unnamed_addr constant [3 x i8] c"%d\00", align 1
@global_str.72 = private unnamed_addr constant [7 x i8] c"Croak!\00", align 1
@fmt.73 = private unnamed_addr constant [3 x i8] c"%s\00", align 1
@fmt.74 = private unnamed_addr constant [4 x i8] c"%s\0A\00", align 1
@fmt.75 = private unnamed_addr constant [3 x i8] c"%d\00", align 1
@global_str.76 = private unnamed_addr constant [30 x i8] 
    c"I have excellent night vision\00", align 1
@Frog_vtable_data = global %Frog_vtable { void (%Animal**, i8*)* @Animal_setAnimal,
    void (%Animal**, i8*)* @Animal_setType, void (%Animal**, i32)* @Animal_setLegs, 
    void (%Animal**, i1)* @Animal_setFur, void (%Animal**, i1)* @Animal_setFly, 
    i8* (%Animal**)* @Animal_getClass, i8* (%Animal**)* @Animal_getType, 
    i32 (%Animal**)* @Animal_numLegs, i1 (%Animal**)* @Animal_hasFur, 
    i1 (%Animal**)* @Animal_canFly, void (%Frog**)* @Frog_noise, 
    void (%Frog**)* @Frog_funFact }
@fmt.77 = private unnamed_addr constant [3 x i8] c"%s\00", align 1
@fmt.78 = private unnamed_addr constant [4 x i8] c"%s\0A\00", align 1
@fmt.79 = private unnamed_addr constant [3 x i8] c"%d\00", align 1
@global_str.80 = private unnamed_addr constant [6 x i8] c"Buzz!\00", align 1
@fmt.81 = private unnamed_addr constant [3 x i8] c"%s\00", align 1
@fmt.82 = private unnamed_addr constant [4 x i8] c"%s\0A\00", align 1
@fmt.83 = private unnamed_addr constant [3 x i8] c"%d\00", align 1
@global_str.84 = private unnamed_addr constant [27 x i8] 
    c"They make something sweet \00", align 1
@Bee_vtable_data = global %Bee_vtable { void (%Animal**, i8*)* @Animal_setAnimal, 
    void (%Animal**, i8*)* @Animal_setType, void (%Animal**, i32)* @Animal_setLegs, 
    void (%Animal**, i1)* @Animal_setFur, void (%Animal**, i1)* @Animal_setFly, 
    i8* (%Animal**)* @Animal_getClass, i8* (%Animal**)* @Animal_getType, 
    i32 (%Animal**)* @Animal_numLegs, i1 (%Animal**)* @Animal_hasFur, 
    i1 (%Animal**)* @Animal_canFly, void (%Bee**)* @Bee_noise, 
    void (%Bee**)* @Bee_funFact }
@fmt.85 = private unnamed_addr constant [3 x i8] c"%s\00", align 1
@fmt.86 = private unnamed_addr constant [4 x i8] c"%s\0A\00", align 1
@fmt.87 = private unnamed_addr constant [3 x i8] c"%d\00", align 1
@global_str.88 = private unnamed_addr constant [13 x i8] c"Howdy folks!\00", align 1
@fmt.89 = private unnamed_addr constant [3 x i8] c"%s\00", align 1
@fmt.90 = private unnamed_addr constant [4 x i8] c"%s\0A\00", align 1
@fmt.91 = private unnamed_addr constant [3 x i8] c"%d\00", align 1
@global_str.92 = private unnamed_addr constant [38 x i8] 
    c"This is someone you know very well ;)\00", align 1
@Richard_vtable_data = global %Richard_vtable { void (%Animal**, i8*)* @Animal_setAnimal, 
    void (%Animal**, i8*)* @Animal_setType, void (%Animal**, i32)* @Animal_setLegs, 
    void (%Animal**, i1)* @Animal_setFur, void (%Animal**, i1)* @Animal_setFly, 
    i8* (%Animal**)* @Animal_getClass, i8* (%Animal**)* @Animal_getType, 
    i32 (%Animal**)* @Animal_numLegs, i1 (%Animal**)* @Animal_hasFur, 
    i1 (%Animal**)* @Animal_canFly, void (%Richard**)* @Richard_noise, 
    void (%Richard**)* @Richard_funFact }
@fmt.93 = private unnamed_addr constant [3 x i8] c"%s\00", align 1
@fmt.94 = private unnamed_addr constant [4 x i8] c"%s\0A\00", align 1
@fmt.95 = private unnamed_addr constant [3 x i8] c"%d\00", align 1
@global_str.96 = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@global_str.97 = private unnamed_addr constant [47 x i8] c"Hello and welcome to the animal guessing game!\00", align 1
@global_str.98 = private unnamed_addr constant [73 x i8] c"You will have 3 tries to guess the animal, along with a number of hints.\00", align 1
@global_str.99 = private unnamed_addr constant [31 x i8] c"Please enter a number from 1-6\00", align 1
@global_str.100 = private unnamed_addr constant [61 x i8] c"Please enter g to make a guess, h for a hint, or q to quit: \00", align 1
@global_str.101 = private unnamed_addr constant [2 x i8] c"q\00", align 1
@global_str.102 = private unnamed_addr constant [54 x i8] c"Thank you for playing the game. We hope you had fun!!\00", align 1
@global_str.103 = private unnamed_addr constant [2 x i8] c"g\00", align 1
@global_str.104 = private unnamed_addr constant [2 x i8] c"h\00", align 1
@global_str.105 = private unnamed_addr constant [2 x i8] c"q\00", align 1
@fmt.106 = private unnamed_addr constant [3 x i8] c"%s\00", align 1
@fmt.107 = private unnamed_addr constant [4 x i8] c"%s\0A\00", align 1
@fmt.108 = private unnamed_addr constant [3 x i8] c"%d\00", align 1
@global_str.109 = private unnamed_addr constant [2 x i8] c"1\00", align 1
@temp_str = private unnamed_addr constant [4 x i8] c"Cat\00", align 1
@global_str.110 = private unnamed_addr constant [7 x i8] c"Mammal\00", align 1
@global_str.111 = private unnamed_addr constant [4 x i8] c"Cat\00", align 1
@global_str.112 = private unnamed_addr constant [2 x i8] c"2\00", align 1
@temp_str.113 = private unnamed_addr constant [4 x i8] c"Dog\00", align 1
@global_str.114 = private unnamed_addr constant [7 x i8] c"Mammal\00", align 1
@global_str.115 = private unnamed_addr constant [4 x i8] c"Dog\00", align 1
@global_str.116 = private unnamed_addr constant [2 x i8] c"3\00", align 1
@temp_str.117 = private unnamed_addr constant [8 x i8] c"Chicken\00", align 1
@global_str.118 = private unnamed_addr constant [5 x i8] c"Bird\00", align 1
@global_str.119 = private unnamed_addr constant [8 x i8] c"Chicken\00", align 1
@global_str.120 = private unnamed_addr constant [2 x i8] c"4\00", align 1
@temp_str.121 = private unnamed_addr constant [6 x i8] c"Snake\00", align 1
@global_str.122 = private unnamed_addr constant [8 x i8] c"Reptile\00", align 1
@global_str.123 = private unnamed_addr constant [6 x i8] c"Snake\00", align 1
@global_str.124 = private unnamed_addr constant [2 x i8] c"5\00", align 1
@temp_str.125 = private unnamed_addr constant [5 x i8] c"Frog\00", align 1
@global_str.126 = private unnamed_addr constant [10 x i8] c"Amphibian\00", align 1
@global_str.127 = private unnamed_addr constant [5 x i8] c"Frog\00", align 1
@global_str.128 = private unnamed_addr constant [2 x i8] c"6\00", align 1
@temp_str.129 = private unnamed_addr constant [4 x i8] c"Bee\00", align 1
@global_str.130 = private unnamed_addr constant [7 x i8] c"Insect\00", align 1
@global_str.131 = private unnamed_addr constant [4 x i8] c"Bee\00", align 1
@temp_str.132 = private unnamed_addr constant [8 x i8] c"Richard\00", align 1
@global_str.133 = private unnamed_addr constant [9 x i8] c"Compiler\00", align 1
@global_str.134 = private unnamed_addr constant [8 x i8] c"Richard\00", align 1
@fmt.135 = private unnamed_addr constant [3 x i8] c"%s\00", align 1
@fmt.136 = private unnamed_addr constant [4 x i8] c"%s\0A\00", align 1
@fmt.137 = private unnamed_addr constant [3 x i8] c"%d\00", align 1
@global_str.138 = private unnamed_addr constant [26 x i8] c"Please enter your guess: \00", align 1
@global_str.139 = private unnamed_addr constant [15 x i8] c"Wrong guess :(\00", align 1
@global_str.140 = private unnamed_addr constant [35 x i8] c"You have used up all your guesses.\00", align 1
@global_str.141 = private unnamed_addr constant [24 x i8] c"The correct animal is: \00", align 1
@global_str.142 = private unnamed_addr constant [29 x i8] c"You'll get 'em next time :)!\00", align 1
@global_str.143 = private unnamed_addr constant [62 x i8] c"Ding ding ding! You got it! Thank you for playing the game :D\00", align 1
@fmt.144 = private unnamed_addr constant [3 x i8] c"%s\00", align 1
@fmt.145 = private unnamed_addr constant [4 x i8] c"%s\0A\00", align 1
@fmt.146 = private unnamed_addr constant [3 x i8] c"%d\00", align 1
@global_str.147 = private unnamed_addr constant [38 x i8] c"Select one of the options for a hint:\00", align 1
@global_str.148 = private unnamed_addr constant [6 x i8] c"Class\00", align 1
@global_str.149 = private unnamed_addr constant [5 x i8] c"Legs\00", align 1
@global_str.150 = private unnamed_addr constant [4 x i8] c"Fur\00", align 1
@global_str.151 = private unnamed_addr constant [4 x i8] c"Fly\00", align 1
@global_str.152 = private unnamed_addr constant [6 x i8] c"Noise\00", align 1
@global_str.153 = private unnamed_addr constant [9 x i8] c"Fun fact\00", align 1
@global_str.154 = private unnamed_addr constant [6 x i8] c"Class\00", align 1
@global_str.155 = private unnamed_addr constant [34 x i8] c"The animal is part of the class: \00", align 1
@global_str.156 = private unnamed_addr constant [5 x i8] c"Legs\00", align 1
@global_str.157 = private unnamed_addr constant [16 x i8] c"The animal has \00", align 1
@global_str.158 = private unnamed_addr constant [6 x i8] c" legs\00", align 1
@global_str.159 = private unnamed_addr constant [4 x i8] c"Fur\00", align 1
@global_str.160 = private unnamed_addr constant [25 x i8] c"The animal does have fur\00", align 1
@global_str.161 = private unnamed_addr constant [29 x i8] c"The animal does not have fur\00", align 1
@global_str.162 = private unnamed_addr constant [4 x i8] c"Fly\00", align 1
@global_str.163 = private unnamed_addr constant [19 x i8] c"The animal can fly\00", align 1
@global_str.164 = private unnamed_addr constant [22 x i8] c"The animal cannot fly\00", align 1
@global_str.165 = private unnamed_addr constant [6 x i8] c"Noise\00", align 1
@global_str.166 = private unnamed_addr constant [9 x i8] c"Fun fact\00", align 1
@global_str.167 = private unnamed_addr constant [35 x i8] c"We don't have that type of hint :(\00", align 1
@AnimalGame_vtable_data = global %AnimalGame_vtable { void (%AnimalGame**)* @AnimalGame_run, %Animal** (%AnimalGame**, i8*)* @AnimalGame_getAnimal, i1 (%AnimalGame**, %Animal**, i32)* @AnimalGame_makeGuess, void (%AnimalGame**, %Animal**)* @AnimalGame_giveHint }
@fmt.168 = private unnamed_addr constant [3 x i8] c"%s\00", align 1
@fmt.169 = private unnamed_addr constant [4 x i8] c"%s\0A\00", align 1
@fmt.170 = private unnamed_addr constant [3 x i8] c"%d\00", align 1
@temp_str.171 = private unnamed_addr constant [11 x i8] c"AnimalGame\00", align 1
@Main_vtable_data = global %Main_vtable { i32 ()* @main }

declare i32 @printf(i8*, ...)

declare i32 @printerr(i8*, ...)

declare i8** @readaline(...)

declare i1 @streq(i8*, i8*, ...)

declare void @class_permitted(i8*, i8**, i32, ...)

define void @Animal_setAnimal(%Animal** %0, i8* %1) {
entry:
  %temp = alloca %Animal*, align 8
  %temp1 = load %Animal*, %Animal** %0, align 8
  store %Animal* %temp1, %Animal** %temp, align 8
  %s = alloca i8*, align 8
  store i8* %1, i8** %s, align 8
  %s2 = load i8*, i8** %s, align 8
  %temp3 = load %Animal*, %Animal** %temp, align 8
  %selfanimal = getelementptr inbounds %Animal, %Animal* %temp3, i32 0, i32 3
  store i8* %s2, i8** %selfanimal, align 8
  ret void
}

define void @Animal_setType(%Animal** %0, i8* %1) {
entry:
  %temp = alloca %Animal*, align 8
  %temp1 = load %Animal*, %Animal** %0, align 8
  store %Animal* %temp1, %Animal** %temp, align 8
  %s = alloca i8*, align 8
  store i8* %1, i8** %s, align 8
  %s2 = load i8*, i8** %s, align 8
  %temp3 = load %Animal*, %Animal** %temp, align 8
  %selftype = getelementptr inbounds %Animal, %Animal* %temp3, i32 0, i32 4
  store i8* %s2, i8** %selftype, align 8
  ret void
}

define void @Animal_setLegs(%Animal** %0, i32 %1) {
entry:
  %temp = alloca %Animal*, align 8
  %temp1 = load %Animal*, %Animal** %0, align 8
  store %Animal* %temp1, %Animal** %temp, align 8
  %i = alloca i32, align 4
  store i32 %1, i32* %i, align 4
  %i2 = load i32, i32* %i, align 4
  %temp3 = load %Animal*, %Animal** %temp, align 8
  %selflegs = getelementptr inbounds %Animal, %Animal* %temp3, i32 0, i32 5
  store i32 %i2, i32* %selflegs, align 4
  ret void
}

define void @Animal_setFur(%Animal** %0, i1 %1) {
entry:
  %temp = alloca %Animal*, align 8
  %temp1 = load %Animal*, %Animal** %0, align 8
  store %Animal* %temp1, %Animal** %temp, align 8
  %b = alloca i1, align 1
  store i1 %1, i1* %b, align 1
  %b2 = load i1, i1* %b, align 1
  %temp3 = load %Animal*, %Animal** %temp, align 8
  %selffur = getelementptr inbounds %Animal, %Animal* %temp3, i32 0, i32 6
  store i1 %b2, i1* %selffur, align 1
  ret void
}

define void @Animal_setFly(%Animal** %0, i1 %1) {
entry:
  %temp = alloca %Animal*, align 8
  %temp1 = load %Animal*, %Animal** %0, align 8
  store %Animal* %temp1, %Animal** %temp, align 8
  %b = alloca i1, align 1
  store i1 %1, i1* %b, align 1
  %b2 = load i1, i1* %b, align 1
  %temp3 = load %Animal*, %Animal** %temp, align 8
  %selfcanFly = getelementptr inbounds %Animal, %Animal* %temp3, i32 0, i32 7
  store i1 %b2, i1* %selfcanFly, align 1
  ret void
}

define i8* @Animal_getClass(%Animal** %0) {
entry:
  %temp = alloca %Animal*, align 8
  %temp1 = load %Animal*, %Animal** %0, align 8
  store %Animal* %temp1, %Animal** %temp, align 8
  %temp2 = load %Animal*, %Animal** %temp, align 8
  %selfanimal = getelementptr inbounds %Animal, %Animal* %temp2, i32 0, i32 3
  %selfanimal3 = load i8*, i8** %selfanimal, align 8
  ret i8* %selfanimal3
}

define i8* @Animal_getType(%Animal** %0) {
entry:
  %temp = alloca %Animal*, align 8
  %temp1 = load %Animal*, %Animal** %0, align 8
  store %Animal* %temp1, %Animal** %temp, align 8
  %temp2 = load %Animal*, %Animal** %temp, align 8
  %selftype = getelementptr inbounds %Animal, %Animal* %temp2, i32 0, i32 4
  %selftype3 = load i8*, i8** %selftype, align 8
  ret i8* %selftype3
}

define i32 @Animal_numLegs(%Animal** %0) {
entry:
  %temp = alloca %Animal*, align 8
  %temp1 = load %Animal*, %Animal** %0, align 8
  store %Animal* %temp1, %Animal** %temp, align 8
  %temp2 = load %Animal*, %Animal** %temp, align 8
  %selflegs = getelementptr inbounds %Animal, %Animal* %temp2, i32 0, i32 5
  %selflegs3 = load i32, i32* %selflegs, align 4
  ret i32 %selflegs3
}

define i1 @Animal_hasFur(%Animal** %0) {
entry:
  %temp = alloca %Animal*, align 8
  %temp1 = load %Animal*, %Animal** %0, align 8
  store %Animal* %temp1, %Animal** %temp, align 8
  %temp2 = load %Animal*, %Animal** %temp, align 8
  %selffur = getelementptr inbounds %Animal, %Animal* %temp2, i32 0, i32 6
  %selffur3 = load i1, i1* %selffur, align 1
  ret i1 %selffur3
}

define i1 @Animal_canFly(%Animal** %0) {
entry:
  %temp = alloca %Animal*, align 8
  %temp1 = load %Animal*, %Animal** %0, align 8
  store %Animal* %temp1, %Animal** %temp, align 8
  %temp2 = load %Animal*, %Animal** %temp, align 8
  %selfcanFly = getelementptr inbounds %Animal, %Animal* %temp2, i32 0, i32 7
  %selfcanFly3 = load i1, i1* %selfcanFly, align 1
  ret i1 %selfcanFly3
}

define void @Animal_noise(%Animal** %0) {
entry:
  %temp = alloca %Animal*, align 8
  %temp1 = load %Animal*, %Animal** %0, align 8
  store %Animal* %temp1, %Animal** %temp, align 8
  %printf = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @fmt.31, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @global_str, i32 0, i32 0))
  ret void
}

define void @Animal_funFact(%Animal** %0) {
entry:
  %temp = alloca %Animal*, align 8
  %temp1 = load %Animal*, %Animal** %0, align 8
  store %Animal* %temp1, %Animal** %temp, align 8
  %printf = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @fmt.34, i32 0, i32 0), i8* getelementptr inbounds ([89 x i8], [89 x i8]* @global_str.36, i32 0, i32 0))
  ret void
}

define void @Cat_noise(%Cat** %0) {
entry:
  %temp = alloca %Cat*, align 8
  %temp1 = load %Cat*, %Cat** %0, align 8
  store %Cat* %temp1, %Cat** %temp, align 8
  %printf = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @fmt.38, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @global_str.40, i32 0, i32 0))
  ret void
}

define void @Cat_funFact(%Cat** %0) {
entry:
  %temp = alloca %Cat*, align 8
  %temp1 = load %Cat*, %Cat** %0, align 8
  store %Cat* %temp1, %Cat** %temp, align 8
  %printf = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @fmt.42, i32 0, i32 0), i8* getelementptr inbounds ([25 x i8], [25 x i8]* @global_str.44, i32 0, i32 0))
  ret void
}

define void @Dog_noise(%Dog** %0) {
entry:
  %temp = alloca %Dog*, align 8
  %temp1 = load %Dog*, %Dog** %0, align 8
  store %Dog* %temp1, %Dog** %temp, align 8
  %printf = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @fmt.46, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @global_str.48, i32 0, i32 0))
  ret void
}

define void @Dog_funFact(%Dog** %0) {
entry:
  %temp = alloca %Dog*, align 8
  %temp1 = load %Dog*, %Dog** %0, align 8
  store %Dog* %temp1, %Dog** %temp, align 8
  %printf = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @fmt.50, i32 0, i32 0), i8* getelementptr inbounds ([31 x i8], [31 x i8]* @global_str.52, i32 0, i32 0))
  ret void
}

define void @Chicken_noise(%Chicken** %0) {
entry:
  %temp = alloca %Chicken*, align 8
  %temp1 = load %Chicken*, %Chicken** %0, align 8
  store %Chicken* %temp1, %Chicken** %temp, align 8
  %printf = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @fmt.54, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @global_str.56, i32 0, i32 0))
  ret void
}

define void @Chicken_funFact(%Chicken** %0) {
entry:
  %temp = alloca %Chicken*, align 8
  %temp1 = load %Chicken*, %Chicken** %0, align 8
  store %Chicken* %temp1, %Chicken** %temp, align 8
  %printf = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @fmt.58, i32 0, i32 0), i8* getelementptr inbounds ([57 x i8], [57 x i8]* @global_str.60, i32 0, i32 0))
  ret void
}

define void @Snake_noise(%Snake** %0) {
entry:
  %temp = alloca %Snake*, align 8
  %temp1 = load %Snake*, %Snake** %0, align 8
  store %Snake* %temp1, %Snake** %temp, align 8
  %printf = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @fmt.62, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @global_str.64, i32 0, i32 0))
  ret void
}

define void @Snake_funFact(%Snake** %0) {
entry:
  %temp = alloca %Snake*, align 8
  %temp1 = load %Snake*, %Snake** %0, align 8
  store %Snake* %temp1, %Snake** %temp, align 8
  %printf = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @fmt.66, i32 0, i32 0), i8* getelementptr inbounds ([24 x i8], [24 x i8]* @global_str.68, i32 0, i32 0))
  ret void
}

define void @Frog_noise(%Frog** %0) {
entry:
  %temp = alloca %Frog*, align 8
  %temp1 = load %Frog*, %Frog** %0, align 8
  store %Frog* %temp1, %Frog** %temp, align 8
  %printf = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @fmt.70, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @global_str.72, i32 0, i32 0))
  ret void
}

define void @Frog_funFact(%Frog** %0) {
entry:
  %temp = alloca %Frog*, align 8
  %temp1 = load %Frog*, %Frog** %0, align 8
  store %Frog* %temp1, %Frog** %temp, align 8
  %printf = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @fmt.74, i32 0, i32 0), i8* getelementptr inbounds ([30 x i8], [30 x i8]* @global_str.76, i32 0, i32 0))
  ret void
}

define void @Bee_noise(%Bee** %0) {
entry:
  %temp = alloca %Bee*, align 8
  %temp1 = load %Bee*, %Bee** %0, align 8
  store %Bee* %temp1, %Bee** %temp, align 8
  %printf = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @fmt.78, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @global_str.80, i32 0, i32 0))
  ret void
}

define void @Bee_funFact(%Bee** %0) {
entry:
  %temp = alloca %Bee*, align 8
  %temp1 = load %Bee*, %Bee** %0, align 8
  store %Bee* %temp1, %Bee** %temp, align 8
  %printf = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @fmt.82, i32 0, i32 0), i8* getelementptr inbounds ([27 x i8], [27 x i8]* @global_str.84, i32 0, i32 0))
  ret void
}

define void @Richard_noise(%Richard** %0) {
entry:
  %temp = alloca %Richard*, align 8
  %temp1 = load %Richard*, %Richard** %0, align 8
  store %Richard* %temp1, %Richard** %temp, align 8
  %printf = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @fmt.86, i32 0, i32 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @global_str.88, i32 0, i32 0))
  ret void
}

define void @Richard_funFact(%Richard** %0) {
entry:
  %temp = alloca %Richard*, align 8
  %temp1 = load %Richard*, %Richard** %0, align 8
  store %Richard* %temp1, %Richard** %temp, align 8
  %printf = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @fmt.90, i32 0, i32 0), i8* getelementptr inbounds ([38 x i8], [38 x i8]* @global_str.92, i32 0, i32 0))
  ret void
}

define void @AnimalGame_run(%AnimalGame** %0) {
entry:
  %temp = alloca %AnimalGame*, align 8
  %temp1 = load %AnimalGame*, %AnimalGame** %0, align 8
  store %AnimalGame* %temp1, %AnimalGame** %temp, align 8
  %input = alloca i8*, align 8
  store i8* getelementptr inbounds ([1 x i8], [1 x i8]* @global_str.96, i32 0, i32 0), i8** %input, align 8
  %count = alloca i32, align 4
  store i32 0, i32* %count, align 4
  %printf = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @fmt.94, i32 0, i32 0), i8* getelementptr inbounds ([47 x i8], [47 x i8]* @global_str.97, i32 0, i32 0))
  %printf2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @fmt.94, i32 0, i32 0), i8* getelementptr inbounds ([73 x i8], [73 x i8]* @global_str.98, i32 0, i32 0))
  %printf3 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @fmt.94, i32 0, i32 0), i8* getelementptr inbounds ([31 x i8], [31 x i8]* @global_str.99, i32 0, i32 0))
  %readaline = call i8** (...) @readaline()
  %get_temp = load i8*, i8** %readaline, align 8
  store i8* %get_temp, i8** %input, align 8
  %temp4 = load %AnimalGame*, %AnimalGame** %temp, align 8
  %vtable = getelementptr inbounds %AnimalGame, %AnimalGame* %temp4, i32 0, i32 0
  %input5 = load i8*, i8** %input, align 8
  %vtable6 = load %AnimalGame_vtable*, %AnimalGame_vtable** %vtable, align 8
  %fun_to_call = getelementptr inbounds %AnimalGame_vtable, %AnimalGame_vtable* %vtable6, i32 0, i32 1
  %function = load %Animal** (%AnimalGame**, i8*)*, %Animal** (%AnimalGame**, i8*)** %fun_to_call, align 8
  %getAnimal_result = call %Animal** %function(%AnimalGame** %temp, i8* %input5)
  %a = alloca %Animal*, align 8
  %temp7 = load %Animal*, %Animal** %getAnimal_result, align 8
  store %Animal* %temp7, %Animal** %a, align 8
  br label %while

while:                                            ; preds = %merge, %entry
  %input44 = load i8*, i8** %input, align 8
  %streq45 = call i1 (i8*, i8*, ...) @streq(i8* %input44, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @global_str.105, i32 0, i32 0))
  %tmp46 = xor i1 %streq45, true
  %count47 = load i32, i32* %count, align 4
  %tmp48 = icmp ne i32 %count47, 3
  %tmp49 = or i1 %tmp46, %tmp48
  br i1 %tmp49, label %while_body, label %merge50

while_body:                                       ; preds = %while
  %printf8 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @fmt.93, i32 0, i32 0), i8* getelementptr inbounds ([61 x i8], [61 x i8]* @global_str.100, i32 0, i32 0))
  %readaline9 = call i8** (...) @readaline()
  %get_temp10 = load i8*, i8** %readaline9, align 8
  store i8* %get_temp10, i8** %input, align 8
  %input11 = load i8*, i8** %input, align 8
  %streq = call i1 (i8*, i8*, ...) @streq(i8* %input11, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @global_str.101, i32 0, i32 0))
  br i1 %streq, label %then, label %else

merge:                                            ; preds = %merge15
  br label %while

then:                                             ; preds = %while_body
  %printf12 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @fmt.94, i32 0, i32 0), i8* getelementptr inbounds ([54 x i8], [54 x i8]* @global_str.102, i32 0, i32 0))
  ret void

else:                                             ; preds = %while_body
  %input13 = load i8*, i8** %input, align 8
  %streq14 = call i1 (i8*, i8*, ...) @streq(i8* %input13, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @global_str.103, i32 0, i32 0))
  br i1 %streq14, label %then16, label %else33

merge15:                                          ; preds = %merge36, %merge23
  br label %merge

then16:                                           ; preds = %else
  %temp17 = load %AnimalGame*, %AnimalGame** %temp, align 8
  %vtable18 = getelementptr inbounds %AnimalGame, %AnimalGame* %temp17, i32 0, i32 0
  %count19 = load i32, i32* %count, align 4
  %vtable20 = load %AnimalGame_vtable*, %AnimalGame_vtable** %vtable18, align 8
  %fun_to_call21 = getelementptr inbounds %AnimalGame_vtable, %AnimalGame_vtable* %vtable20, i32 0, i32 2
  %function22 = load i1 (%AnimalGame**, %Animal**, i32)*, i1 (%AnimalGame**, %Animal**, i32)** %fun_to_call21, align 8
  %makeGuess_result = call i1 %function22(%AnimalGame** %temp, %Animal** %a, i32 %count19)
  %tmp = xor i1 %makeGuess_result, true
  br i1 %tmp, label %then24, label %else32

merge23:                                          ; preds = %else32, %merge29
  br label %merge15

then24:                                           ; preds = %then16
  %count25 = load i32, i32* %count, align 4
  %tmp26 = add i32 %count25, 1
  store i32 %tmp26, i32* %count, align 4
  %count27 = load i32, i32* %count, align 4
  %tmp28 = icmp eq i32 %count27, 3
  br i1 %tmp28, label %then30, label %else31

merge29:                                          ; preds = %else31
  br label %merge23

then30:                                           ; preds = %then24
  ret void

else31:                                           ; preds = %then24
  br label %merge29

else32:                                           ; preds = %then16
  br label %merge23

else33:                                           ; preds = %else
  %input34 = load i8*, i8** %input, align 8
  %streq35 = call i1 (i8*, i8*, ...) @streq(i8* %input34, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @global_str.104, i32 0, i32 0))
  br i1 %streq35, label %then37, label %else43

merge36:                                          ; preds = %else43, %then37
  br label %merge15

then37:                                           ; preds = %else33
  %temp38 = load %AnimalGame*, %AnimalGame** %temp, align 8
  %vtable39 = getelementptr inbounds %AnimalGame, %AnimalGame* %temp38, i32 0, i32 0
  %vtable40 = load %AnimalGame_vtable*, %AnimalGame_vtable** %vtable39, align 8
  %fun_to_call41 = getelementptr inbounds %AnimalGame_vtable, %AnimalGame_vtable* %vtable40, i32 0, i32 3
  %function42 = load void (%AnimalGame**, %Animal**)*, void (%AnimalGame**, %Animal**)** %fun_to_call41, align 8
  call void %function42(%AnimalGame** %temp, %Animal** %a)
  br label %merge36

else43:                                           ; preds = %else33
  br label %merge36

merge50:                                          ; preds = %while
  ret void
}

define %Animal** @AnimalGame_getAnimal(%AnimalGame** %0, i8* %1) {
entry:
  %temp = alloca %AnimalGame*, align 8
  %temp1 = load %AnimalGame*, %AnimalGame** %0, align 8
  store %AnimalGame* %temp1, %AnimalGame** %temp, align 8
  %input = alloca i8*, align 8
  store i8* %1, i8** %input, align 8
  %a = alloca %Animal*, align 8
  %input2 = load i8*, i8** %input, align 8
  %streq = call i1 (i8*, i8*, ...) @streq(i8* %input2, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @global_str.109, i32 0, i32 0))
  br i1 %streq, label %then, label %else

merge:                                            ; preds = %merge35, %then
  ret %Animal** %a

then:                                             ; preds = %entry
  %malloccall = tail call i8* @malloc(i32 ptrtoint (%Cat* getelementptr (%Cat, %Cat* null, i32 1) to i32))
  %Cat = bitcast i8* %malloccall to %Cat*
  %vtable = getelementptr inbounds %Cat, %Cat* %Cat, i32 0, i32 0
  store %Cat_vtable* @Cat_vtable_data, %Cat_vtable** %vtable, align 8
  %temp3 = alloca %Cat*, align 8
  %num_permitted = getelementptr inbounds %Cat, %Cat* %Cat, i32 0, i32 1
  store i32 1, i32* %num_permitted, align 4
  %permit_list = getelementptr inbounds %Cat, %Cat* %Cat, i32 0, i32 2
  store [1 x i8*] [i8* getelementptr inbounds ([4 x i8], [4 x i8]* @temp_str, i32 0, i32 0)], [1 x i8*]* %permit_list, align 8
  store %Cat* %Cat, %Cat** %temp3, align 8
  %c = alloca %Cat*, align 8
  %temp4 = load %Cat*, %Cat** %temp3, align 8
  store %Cat* %temp4, %Cat** %c, align 8
  %temp5 = load %Cat*, %Cat** %c, align 8
  %vtable6 = getelementptr inbounds %Cat, %Cat* %temp5, i32 0, i32 0
  %vtable7 = load %Cat_vtable*, %Cat_vtable** %vtable6, align 8
  %fun_to_call = getelementptr inbounds %Cat_vtable, %Cat_vtable* %vtable7, i32 0, i32 0
  %function = load void (%Animal**, i8*)*, void (%Animal**, i8*)** %fun_to_call, align 8
  %arg_cast = bitcast %Cat** %c to %Animal**
  call void %function(%Animal** %arg_cast, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @global_str.110, i32 0, i32 0))
  %temp8 = load %Cat*, %Cat** %c, align 8
  %vtable9 = getelementptr inbounds %Cat, %Cat* %temp8, i32 0, i32 0
  %vtable10 = load %Cat_vtable*, %Cat_vtable** %vtable9, align 8
  %fun_to_call11 = getelementptr inbounds %Cat_vtable, %Cat_vtable* %vtable10, i32 0, i32 1
  %function12 = load void (%Animal**, i8*)*, void (%Animal**, i8*)** %fun_to_call11, align 8
  %arg_cast13 = bitcast %Cat** %c to %Animal**
  call void %function12(%Animal** %arg_cast13, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @global_str.111, i32 0, i32 0))
  %temp14 = load %Cat*, %Cat** %c, align 8
  %vtable15 = getelementptr inbounds %Cat, %Cat* %temp14, i32 0, i32 0
  %vtable16 = load %Cat_vtable*, %Cat_vtable** %vtable15, align 8
  %fun_to_call17 = getelementptr inbounds %Cat_vtable, %Cat_vtable* %vtable16, i32 0, i32 2
  %function18 = load void (%Animal**, i32)*, void (%Animal**, i32)** %fun_to_call17, align 8
  %arg_cast19 = bitcast %Cat** %c to %Animal**
  call void %function18(%Animal** %arg_cast19, i32 4)
  %temp20 = load %Cat*, %Cat** %c, align 8
  %vtable21 = getelementptr inbounds %Cat, %Cat* %temp20, i32 0, i32 0
  %vtable22 = load %Cat_vtable*, %Cat_vtable** %vtable21, align 8
  %fun_to_call23 = getelementptr inbounds %Cat_vtable, %Cat_vtable* %vtable22, i32 0, i32 3
  %function24 = load void (%Animal**, i1)*, void (%Animal**, i1)** %fun_to_call23, align 8
  %arg_cast25 = bitcast %Cat** %c to %Animal**
  call void %function24(%Animal** %arg_cast25, i1 true)
  %temp26 = load %Cat*, %Cat** %c, align 8
  %vtable27 = getelementptr inbounds %Cat, %Cat* %temp26, i32 0, i32 0
  %vtable28 = load %Cat_vtable*, %Cat_vtable** %vtable27, align 8
  %fun_to_call29 = getelementptr inbounds %Cat_vtable, %Cat_vtable* %vtable28, i32 0, i32 4
  %function30 = load void (%Animal**, i1)*, void (%Animal**, i1)** %fun_to_call29, align 8
  %arg_cast31 = bitcast %Cat** %c to %Animal**
  call void %function30(%Animal** %arg_cast31, i1 false)
  %cast_assign = bitcast %Cat** %c to %Animal**
  %temp32 = load %Animal*, %Animal** %cast_assign, align 8
  store %Animal* %temp32, %Animal** %a, align 8
  br label %merge

else:                                             ; preds = %entry
  %input33 = load i8*, i8** %input, align 8
  %streq34 = call i1 (i8*, i8*, ...) @streq(i8* %input33, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @global_str.112, i32 0, i32 0))
  br i1 %streq34, label %then36, label %else75

merge35:                                          ; preds = %merge78, %then36
  br label %merge

then36:                                           ; preds = %else
  %malloccall37 = tail call i8* @malloc(i32 ptrtoint (%Dog* getelementptr (%Dog, %Dog* null, i32 1) to i32))
  %Dog = bitcast i8* %malloccall37 to %Dog*
  %vtable38 = getelementptr inbounds %Dog, %Dog* %Dog, i32 0, i32 0
  store %Dog_vtable* @Dog_vtable_data, %Dog_vtable** %vtable38, align 8
  %temp39 = alloca %Dog*, align 8
  %num_permitted40 = getelementptr inbounds %Dog, %Dog* %Dog, i32 0, i32 1
  store i32 1, i32* %num_permitted40, align 4
  %permit_list41 = getelementptr inbounds %Dog, %Dog* %Dog, i32 0, i32 2
  store [1 x i8*] [i8* getelementptr inbounds ([4 x i8], [4 x i8]* @temp_str.113, i32 0, i32 0)], [1 x i8*]* %permit_list41, align 8
  store %Dog* %Dog, %Dog** %temp39, align 8
  %d = alloca %Dog*, align 8
  %temp42 = load %Dog*, %Dog** %temp39, align 8
  store %Dog* %temp42, %Dog** %d, align 8
  %temp43 = load %Dog*, %Dog** %d, align 8
  %vtable44 = getelementptr inbounds %Dog, %Dog* %temp43, i32 0, i32 0
  %vtable45 = load %Dog_vtable*, %Dog_vtable** %vtable44, align 8
  %fun_to_call46 = getelementptr inbounds %Dog_vtable, %Dog_vtable* %vtable45, i32 0, i32 0
  %function47 = load void (%Animal**, i8*)*, void (%Animal**, i8*)** %fun_to_call46, align 8
  %arg_cast48 = bitcast %Dog** %d to %Animal**
  call void %function47(%Animal** %arg_cast48, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @global_str.114, i32 0, i32 0))
  %temp49 = load %Dog*, %Dog** %d, align 8
  %vtable50 = getelementptr inbounds %Dog, %Dog* %temp49, i32 0, i32 0
  %vtable51 = load %Dog_vtable*, %Dog_vtable** %vtable50, align 8
  %fun_to_call52 = getelementptr inbounds %Dog_vtable, %Dog_vtable* %vtable51, i32 0, i32 1
  %function53 = load void (%Animal**, i8*)*, void (%Animal**, i8*)** %fun_to_call52, align 8
  %arg_cast54 = bitcast %Dog** %d to %Animal**
  call void %function53(%Animal** %arg_cast54, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @global_str.115, i32 0, i32 0))
  %temp55 = load %Dog*, %Dog** %d, align 8
  %vtable56 = getelementptr inbounds %Dog, %Dog* %temp55, i32 0, i32 0
  %vtable57 = load %Dog_vtable*, %Dog_vtable** %vtable56, align 8
  %fun_to_call58 = getelementptr inbounds %Dog_vtable, %Dog_vtable* %vtable57, i32 0, i32 2
  %function59 = load void (%Animal**, i32)*, void (%Animal**, i32)** %fun_to_call58, align 8
  %arg_cast60 = bitcast %Dog** %d to %Animal**
  call void %function59(%Animal** %arg_cast60, i32 4)
  %temp61 = load %Dog*, %Dog** %d, align 8
  %vtable62 = getelementptr inbounds %Dog, %Dog* %temp61, i32 0, i32 0
  %vtable63 = load %Dog_vtable*, %Dog_vtable** %vtable62, align 8
  %fun_to_call64 = getelementptr inbounds %Dog_vtable, %Dog_vtable* %vtable63, i32 0, i32 3
  %function65 = load void (%Animal**, i1)*, void (%Animal**, i1)** %fun_to_call64, align 8
  %arg_cast66 = bitcast %Dog** %d to %Animal**
  call void %function65(%Animal** %arg_cast66, i1 true)
  %temp67 = load %Dog*, %Dog** %d, align 8
  %vtable68 = getelementptr inbounds %Dog, %Dog* %temp67, i32 0, i32 0
  %vtable69 = load %Dog_vtable*, %Dog_vtable** %vtable68, align 8
  %fun_to_call70 = getelementptr inbounds %Dog_vtable, %Dog_vtable* %vtable69, i32 0, i32 4
  %function71 = load void (%Animal**, i1)*, void (%Animal**, i1)** %fun_to_call70, align 8
  %arg_cast72 = bitcast %Dog** %d to %Animal**
  call void %function71(%Animal** %arg_cast72, i1 false)
  %cast_assign73 = bitcast %Dog** %d to %Animal**
  %temp74 = load %Animal*, %Animal** %cast_assign73, align 8
  store %Animal* %temp74, %Animal** %a, align 8
  br label %merge35

else75:                                           ; preds = %else
  %input76 = load i8*, i8** %input, align 8
  %streq77 = call i1 (i8*, i8*, ...) @streq(i8* %input76, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @global_str.116, i32 0, i32 0))
  br i1 %streq77, label %then79, label %else119

merge78:                                          ; preds = %merge122, %then79
  br label %merge35

then79:                                           ; preds = %else75
  %malloccall80 = tail call i8* @malloc(i32 ptrtoint (%Chicken* getelementptr (%Chicken, %Chicken* null, i32 1) to i32))
  %Chicken = bitcast i8* %malloccall80 to %Chicken*
  %vtable81 = getelementptr inbounds %Chicken, %Chicken* %Chicken, i32 0, i32 0
  store %Chicken_vtable* @Chicken_vtable_data, %Chicken_vtable** %vtable81, align 8
  %temp82 = alloca %Chicken*, align 8
  %num_permitted83 = getelementptr inbounds %Chicken, %Chicken* %Chicken, i32 0, i32 1
  store i32 1, i32* %num_permitted83, align 4
  %permit_list84 = getelementptr inbounds %Chicken, %Chicken* %Chicken, i32 0, i32 2
  store [1 x i8*] [i8* getelementptr inbounds ([8 x i8], [8 x i8]* @temp_str.117, i32 0, i32 0)], [1 x i8*]* %permit_list84, align 8
  store %Chicken* %Chicken, %Chicken** %temp82, align 8
  %c85 = alloca %Chicken*, align 8
  %temp86 = load %Chicken*, %Chicken** %temp82, align 8
  store %Chicken* %temp86, %Chicken** %c85, align 8
  %temp87 = load %Chicken*, %Chicken** %c85, align 8
  %vtable88 = getelementptr inbounds %Chicken, %Chicken* %temp87, i32 0, i32 0
  %vtable89 = load %Chicken_vtable*, %Chicken_vtable** %vtable88, align 8
  %fun_to_call90 = getelementptr inbounds %Chicken_vtable, %Chicken_vtable* %vtable89, i32 0, i32 0
  %function91 = load void (%Animal**, i8*)*, void (%Animal**, i8*)** %fun_to_call90, align 8
  %arg_cast92 = bitcast %Chicken** %c85 to %Animal**
  call void %function91(%Animal** %arg_cast92, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @global_str.118, i32 0, i32 0))
  %temp93 = load %Chicken*, %Chicken** %c85, align 8
  %vtable94 = getelementptr inbounds %Chicken, %Chicken* %temp93, i32 0, i32 0
  %vtable95 = load %Chicken_vtable*, %Chicken_vtable** %vtable94, align 8
  %fun_to_call96 = getelementptr inbounds %Chicken_vtable, %Chicken_vtable* %vtable95, i32 0, i32 1
  %function97 = load void (%Animal**, i8*)*, void (%Animal**, i8*)** %fun_to_call96, align 8
  %arg_cast98 = bitcast %Chicken** %c85 to %Animal**
  call void %function97(%Animal** %arg_cast98, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @global_str.119, i32 0, i32 0))
  %temp99 = load %Chicken*, %Chicken** %c85, align 8
  %vtable100 = getelementptr inbounds %Chicken, %Chicken* %temp99, i32 0, i32 0
  %vtable101 = load %Chicken_vtable*, %Chicken_vtable** %vtable100, align 8
  %fun_to_call102 = getelementptr inbounds %Chicken_vtable, %Chicken_vtable* %vtable101, i32 0, i32 2
  %function103 = load void (%Animal**, i32)*, void (%Animal**, i32)** %fun_to_call102, align 8
  %arg_cast104 = bitcast %Chicken** %c85 to %Animal**
  call void %function103(%Animal** %arg_cast104, i32 2)
  %temp105 = load %Chicken*, %Chicken** %c85, align 8
  %vtable106 = getelementptr inbounds %Chicken, %Chicken* %temp105, i32 0, i32 0
  %vtable107 = load %Chicken_vtable*, %Chicken_vtable** %vtable106, align 8
  %fun_to_call108 = getelementptr inbounds %Chicken_vtable, %Chicken_vtable* %vtable107, i32 0, i32 3
  %function109 = load void (%Animal**, i1)*, void (%Animal**, i1)** %fun_to_call108, align 8
  %arg_cast110 = bitcast %Chicken** %c85 to %Animal**
  call void %function109(%Animal** %arg_cast110, i1 false)
  %temp111 = load %Chicken*, %Chicken** %c85, align 8
  %vtable112 = getelementptr inbounds %Chicken, %Chicken* %temp111, i32 0, i32 0
  %vtable113 = load %Chicken_vtable*, %Chicken_vtable** %vtable112, align 8
  %fun_to_call114 = getelementptr inbounds %Chicken_vtable, %Chicken_vtable* %vtable113, i32 0, i32 4
  %function115 = load void (%Animal**, i1)*, void (%Animal**, i1)** %fun_to_call114, align 8
  %arg_cast116 = bitcast %Chicken** %c85 to %Animal**
  call void %function115(%Animal** %arg_cast116, i1 true)
  %cast_assign117 = bitcast %Chicken** %c85 to %Animal**
  %temp118 = load %Animal*, %Animal** %cast_assign117, align 8
  store %Animal* %temp118, %Animal** %a, align 8
  br label %merge78

else119:                                          ; preds = %else75
  %input120 = load i8*, i8** %input, align 8
  %streq121 = call i1 (i8*, i8*, ...) @streq(i8* %input120, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @global_str.120, i32 0, i32 0))
  br i1 %streq121, label %then123, label %else162

merge122:                                         ; preds = %merge165, %then123
  br label %merge78

then123:                                          ; preds = %else119
  %malloccall124 = tail call i8* @malloc(i32 ptrtoint (%Snake* getelementptr (%Snake, %Snake* null, i32 1) to i32))
  %Snake = bitcast i8* %malloccall124 to %Snake*
  %vtable125 = getelementptr inbounds %Snake, %Snake* %Snake, i32 0, i32 0
  store %Snake_vtable* @Snake_vtable_data, %Snake_vtable** %vtable125, align 8
  %temp126 = alloca %Snake*, align 8
  %num_permitted127 = getelementptr inbounds %Snake, %Snake* %Snake, i32 0, i32 1
  store i32 1, i32* %num_permitted127, align 4
  %permit_list128 = getelementptr inbounds %Snake, %Snake* %Snake, i32 0, i32 2
  store [1 x i8*] [i8* getelementptr inbounds ([6 x i8], [6 x i8]* @temp_str.121, i32 0, i32 0)], [1 x i8*]* %permit_list128, align 8
  store %Snake* %Snake, %Snake** %temp126, align 8
  %s = alloca %Snake*, align 8
  %temp129 = load %Snake*, %Snake** %temp126, align 8
  store %Snake* %temp129, %Snake** %s, align 8
  %temp130 = load %Snake*, %Snake** %s, align 8
  %vtable131 = getelementptr inbounds %Snake, %Snake* %temp130, i32 0, i32 0
  %vtable132 = load %Snake_vtable*, %Snake_vtable** %vtable131, align 8
  %fun_to_call133 = getelementptr inbounds %Snake_vtable, %Snake_vtable* %vtable132, i32 0, i32 0
  %function134 = load void (%Animal**, i8*)*, void (%Animal**, i8*)** %fun_to_call133, align 8
  %arg_cast135 = bitcast %Snake** %s to %Animal**
  call void %function134(%Animal** %arg_cast135, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @global_str.122, i32 0, i32 0))
  %temp136 = load %Snake*, %Snake** %s, align 8
  %vtable137 = getelementptr inbounds %Snake, %Snake* %temp136, i32 0, i32 0
  %vtable138 = load %Snake_vtable*, %Snake_vtable** %vtable137, align 8
  %fun_to_call139 = getelementptr inbounds %Snake_vtable, %Snake_vtable* %vtable138, i32 0, i32 1
  %function140 = load void (%Animal**, i8*)*, void (%Animal**, i8*)** %fun_to_call139, align 8
  %arg_cast141 = bitcast %Snake** %s to %Animal**
  call void %function140(%Animal** %arg_cast141, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @global_str.123, i32 0, i32 0))
  %temp142 = load %Snake*, %Snake** %s, align 8
  %vtable143 = getelementptr inbounds %Snake, %Snake* %temp142, i32 0, i32 0
  %vtable144 = load %Snake_vtable*, %Snake_vtable** %vtable143, align 8
  %fun_to_call145 = getelementptr inbounds %Snake_vtable, %Snake_vtable* %vtable144, i32 0, i32 2
  %function146 = load void (%Animal**, i32)*, void (%Animal**, i32)** %fun_to_call145, align 8
  %arg_cast147 = bitcast %Snake** %s to %Animal**
  call void %function146(%Animal** %arg_cast147, i32 0)
  %temp148 = load %Snake*, %Snake** %s, align 8
  %vtable149 = getelementptr inbounds %Snake, %Snake* %temp148, i32 0, i32 0
  %vtable150 = load %Snake_vtable*, %Snake_vtable** %vtable149, align 8
  %fun_to_call151 = getelementptr inbounds %Snake_vtable, %Snake_vtable* %vtable150, i32 0, i32 3
  %function152 = load void (%Animal**, i1)*, void (%Animal**, i1)** %fun_to_call151, align 8
  %arg_cast153 = bitcast %Snake** %s to %Animal**
  call void %function152(%Animal** %arg_cast153, i1 false)
  %temp154 = load %Snake*, %Snake** %s, align 8
  %vtable155 = getelementptr inbounds %Snake, %Snake* %temp154, i32 0, i32 0
  %vtable156 = load %Snake_vtable*, %Snake_vtable** %vtable155, align 8
  %fun_to_call157 = getelementptr inbounds %Snake_vtable, %Snake_vtable* %vtable156, i32 0, i32 4
  %function158 = load void (%Animal**, i1)*, void (%Animal**, i1)** %fun_to_call157, align 8
  %arg_cast159 = bitcast %Snake** %s to %Animal**
  call void %function158(%Animal** %arg_cast159, i1 false)
  %cast_assign160 = bitcast %Snake** %s to %Animal**
  %temp161 = load %Animal*, %Animal** %cast_assign160, align 8
  store %Animal* %temp161, %Animal** %a, align 8
  br label %merge122

else162:                                          ; preds = %else119
  %input163 = load i8*, i8** %input, align 8
  %streq164 = call i1 (i8*, i8*, ...) @streq(i8* %input163, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @global_str.124, i32 0, i32 0))
  br i1 %streq164, label %then166, label %else205

merge165:                                         ; preds = %merge208, %then166
  br label %merge122

then166:                                          ; preds = %else162
  %malloccall167 = tail call i8* @malloc(i32 ptrtoint (%Frog* getelementptr (%Frog, %Frog* null, i32 1) to i32))
  %Frog = bitcast i8* %malloccall167 to %Frog*
  %vtable168 = getelementptr inbounds %Frog, %Frog* %Frog, i32 0, i32 0
  store %Frog_vtable* @Frog_vtable_data, %Frog_vtable** %vtable168, align 8
  %temp169 = alloca %Frog*, align 8
  %num_permitted170 = getelementptr inbounds %Frog, %Frog* %Frog, i32 0, i32 1
  store i32 1, i32* %num_permitted170, align 4
  %permit_list171 = getelementptr inbounds %Frog, %Frog* %Frog, i32 0, i32 2
  store [1 x i8*] [i8* getelementptr inbounds ([5 x i8], [5 x i8]* @temp_str.125, i32 0, i32 0)], [1 x i8*]* %permit_list171, align 8
  store %Frog* %Frog, %Frog** %temp169, align 8
  %f = alloca %Frog*, align 8
  %temp172 = load %Frog*, %Frog** %temp169, align 8
  store %Frog* %temp172, %Frog** %f, align 8
  %temp173 = load %Frog*, %Frog** %f, align 8
  %vtable174 = getelementptr inbounds %Frog, %Frog* %temp173, i32 0, i32 0
  %vtable175 = load %Frog_vtable*, %Frog_vtable** %vtable174, align 8
  %fun_to_call176 = getelementptr inbounds %Frog_vtable, %Frog_vtable* %vtable175, i32 0, i32 0
  %function177 = load void (%Animal**, i8*)*, void (%Animal**, i8*)** %fun_to_call176, align 8
  %arg_cast178 = bitcast %Frog** %f to %Animal**
  call void %function177(%Animal** %arg_cast178, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @global_str.126, i32 0, i32 0))
  %temp179 = load %Frog*, %Frog** %f, align 8
  %vtable180 = getelementptr inbounds %Frog, %Frog* %temp179, i32 0, i32 0
  %vtable181 = load %Frog_vtable*, %Frog_vtable** %vtable180, align 8
  %fun_to_call182 = getelementptr inbounds %Frog_vtable, %Frog_vtable* %vtable181, i32 0, i32 1
  %function183 = load void (%Animal**, i8*)*, void (%Animal**, i8*)** %fun_to_call182, align 8
  %arg_cast184 = bitcast %Frog** %f to %Animal**
  call void %function183(%Animal** %arg_cast184, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @global_str.127, i32 0, i32 0))
  %temp185 = load %Frog*, %Frog** %f, align 8
  %vtable186 = getelementptr inbounds %Frog, %Frog* %temp185, i32 0, i32 0
  %vtable187 = load %Frog_vtable*, %Frog_vtable** %vtable186, align 8
  %fun_to_call188 = getelementptr inbounds %Frog_vtable, %Frog_vtable* %vtable187, i32 0, i32 2
  %function189 = load void (%Animal**, i32)*, void (%Animal**, i32)** %fun_to_call188, align 8
  %arg_cast190 = bitcast %Frog** %f to %Animal**
  call void %function189(%Animal** %arg_cast190, i32 4)
  %temp191 = load %Frog*, %Frog** %f, align 8
  %vtable192 = getelementptr inbounds %Frog, %Frog* %temp191, i32 0, i32 0
  %vtable193 = load %Frog_vtable*, %Frog_vtable** %vtable192, align 8
  %fun_to_call194 = getelementptr inbounds %Frog_vtable, %Frog_vtable* %vtable193, i32 0, i32 3
  %function195 = load void (%Animal**, i1)*, void (%Animal**, i1)** %fun_to_call194, align 8
  %arg_cast196 = bitcast %Frog** %f to %Animal**
  call void %function195(%Animal** %arg_cast196, i1 false)
  %temp197 = load %Frog*, %Frog** %f, align 8
  %vtable198 = getelementptr inbounds %Frog, %Frog* %temp197, i32 0, i32 0
  %vtable199 = load %Frog_vtable*, %Frog_vtable** %vtable198, align 8
  %fun_to_call200 = getelementptr inbounds %Frog_vtable, %Frog_vtable* %vtable199, i32 0, i32 4
  %function201 = load void (%Animal**, i1)*, void (%Animal**, i1)** %fun_to_call200, align 8
  %arg_cast202 = bitcast %Frog** %f to %Animal**
  call void %function201(%Animal** %arg_cast202, i1 false)
  %cast_assign203 = bitcast %Frog** %f to %Animal**
  %temp204 = load %Animal*, %Animal** %cast_assign203, align 8
  store %Animal* %temp204, %Animal** %a, align 8
  br label %merge165

else205:                                          ; preds = %else162
  %input206 = load i8*, i8** %input, align 8
  %streq207 = call i1 (i8*, i8*, ...) @streq(i8* %input206, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @global_str.128, i32 0, i32 0))
  br i1 %streq207, label %then209, label %else248

merge208:                                         ; preds = %else248, %then209
  br label %merge165

then209:                                          ; preds = %else205
  %malloccall210 = tail call i8* @malloc(i32 ptrtoint (%Bee* getelementptr (%Bee, %Bee* null, i32 1) to i32))
  %Bee = bitcast i8* %malloccall210 to %Bee*
  %vtable211 = getelementptr inbounds %Bee, %Bee* %Bee, i32 0, i32 0
  store %Bee_vtable* @Bee_vtable_data, %Bee_vtable** %vtable211, align 8
  %temp212 = alloca %Bee*, align 8
  %num_permitted213 = getelementptr inbounds %Bee, %Bee* %Bee, i32 0, i32 1
  store i32 1, i32* %num_permitted213, align 4
  %permit_list214 = getelementptr inbounds %Bee, %Bee* %Bee, i32 0, i32 2
  store [1 x i8*] [i8* getelementptr inbounds ([4 x i8], [4 x i8]* @temp_str.129, i32 0, i32 0)], [1 x i8*]* %permit_list214, align 8
  store %Bee* %Bee, %Bee** %temp212, align 8
  %b = alloca %Bee*, align 8
  %temp215 = load %Bee*, %Bee** %temp212, align 8
  store %Bee* %temp215, %Bee** %b, align 8
  %temp216 = load %Bee*, %Bee** %b, align 8
  %vtable217 = getelementptr inbounds %Bee, %Bee* %temp216, i32 0, i32 0
  %vtable218 = load %Bee_vtable*, %Bee_vtable** %vtable217, align 8
  %fun_to_call219 = getelementptr inbounds %Bee_vtable, %Bee_vtable* %vtable218, i32 0, i32 0
  %function220 = load void (%Animal**, i8*)*, void (%Animal**, i8*)** %fun_to_call219, align 8
  %arg_cast221 = bitcast %Bee** %b to %Animal**
  call void %function220(%Animal** %arg_cast221, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @global_str.130, i32 0, i32 0))
  %temp222 = load %Bee*, %Bee** %b, align 8
  %vtable223 = getelementptr inbounds %Bee, %Bee* %temp222, i32 0, i32 0
  %vtable224 = load %Bee_vtable*, %Bee_vtable** %vtable223, align 8
  %fun_to_call225 = getelementptr inbounds %Bee_vtable, %Bee_vtable* %vtable224, i32 0, i32 1
  %function226 = load void (%Animal**, i8*)*, void (%Animal**, i8*)** %fun_to_call225, align 8
  %arg_cast227 = bitcast %Bee** %b to %Animal**
  call void %function226(%Animal** %arg_cast227, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @global_str.131, i32 0, i32 0))
  %temp228 = load %Bee*, %Bee** %b, align 8
  %vtable229 = getelementptr inbounds %Bee, %Bee* %temp228, i32 0, i32 0
  %vtable230 = load %Bee_vtable*, %Bee_vtable** %vtable229, align 8
  %fun_to_call231 = getelementptr inbounds %Bee_vtable, %Bee_vtable* %vtable230, i32 0, i32 2
  %function232 = load void (%Animal**, i32)*, void (%Animal**, i32)** %fun_to_call231, align 8
  %arg_cast233 = bitcast %Bee** %b to %Animal**
  call void %function232(%Animal** %arg_cast233, i32 6)
  %temp234 = load %Bee*, %Bee** %b, align 8
  %vtable235 = getelementptr inbounds %Bee, %Bee* %temp234, i32 0, i32 0
  %vtable236 = load %Bee_vtable*, %Bee_vtable** %vtable235, align 8
  %fun_to_call237 = getelementptr inbounds %Bee_vtable, %Bee_vtable* %vtable236, i32 0, i32 3
  %function238 = load void (%Animal**, i1)*, void (%Animal**, i1)** %fun_to_call237, align 8
  %arg_cast239 = bitcast %Bee** %b to %Animal**
  call void %function238(%Animal** %arg_cast239, i1 false)
  %temp240 = load %Bee*, %Bee** %b, align 8
  %vtable241 = getelementptr inbounds %Bee, %Bee* %temp240, i32 0, i32 0
  %vtable242 = load %Bee_vtable*, %Bee_vtable** %vtable241, align 8
  %fun_to_call243 = getelementptr inbounds %Bee_vtable, %Bee_vtable* %vtable242, i32 0, i32 4
  %function244 = load void (%Animal**, i1)*, void (%Animal**, i1)** %fun_to_call243, align 8
  %arg_cast245 = bitcast %Bee** %b to %Animal**
  call void %function244(%Animal** %arg_cast245, i1 true)
  %cast_assign246 = bitcast %Bee** %b to %Animal**
  %temp247 = load %Animal*, %Animal** %cast_assign246, align 8
  store %Animal* %temp247, %Animal** %a, align 8
  br label %merge208

else248:                                          ; preds = %else205
  %malloccall249 = tail call i8* @malloc(i32 ptrtoint (%Richard* getelementptr (%Richard, %Richard* null, i32 1) to i32))
  %Richard = bitcast i8* %malloccall249 to %Richard*
  %vtable250 = getelementptr inbounds %Richard, %Richard* %Richard, i32 0, i32 0
  store %Richard_vtable* @Richard_vtable_data, %Richard_vtable** %vtable250, align 8
  %temp251 = alloca %Richard*, align 8
  %num_permitted252 = getelementptr inbounds %Richard, %Richard* %Richard, i32 0, i32 1
  store i32 1, i32* %num_permitted252, align 4
  %permit_list253 = getelementptr inbounds %Richard, %Richard* %Richard, i32 0, i32 2
  store [1 x i8*] [i8* getelementptr inbounds ([8 x i8], [8 x i8]* @temp_str.132, i32 0, i32 0)], [1 x i8*]* %permit_list253, align 8
  store %Richard* %Richard, %Richard** %temp251, align 8
  %r = alloca %Richard*, align 8
  %temp254 = load %Richard*, %Richard** %temp251, align 8
  store %Richard* %temp254, %Richard** %r, align 8
  %temp255 = load %Richard*, %Richard** %r, align 8
  %vtable256 = getelementptr inbounds %Richard, %Richard* %temp255, i32 0, i32 0
  %vtable257 = load %Richard_vtable*, %Richard_vtable** %vtable256, align 8
  %fun_to_call258 = getelementptr inbounds %Richard_vtable, %Richard_vtable* %vtable257, i32 0, i32 0
  %function259 = load void (%Animal**, i8*)*, void (%Animal**, i8*)** %fun_to_call258, align 8
  %arg_cast260 = bitcast %Richard** %r to %Animal**
  call void %function259(%Animal** %arg_cast260, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @global_str.133, i32 0, i32 0))
  %temp261 = load %Richard*, %Richard** %r, align 8
  %vtable262 = getelementptr inbounds %Richard, %Richard* %temp261, i32 0, i32 0
  %vtable263 = load %Richard_vtable*, %Richard_vtable** %vtable262, align 8
  %fun_to_call264 = getelementptr inbounds %Richard_vtable, %Richard_vtable* %vtable263, i32 0, i32 1
  %function265 = load void (%Animal**, i8*)*, void (%Animal**, i8*)** %fun_to_call264, align 8
  %arg_cast266 = bitcast %Richard** %r to %Animal**
  call void %function265(%Animal** %arg_cast266, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @global_str.134, i32 0, i32 0))
  %temp267 = load %Richard*, %Richard** %r, align 8
  %vtable268 = getelementptr inbounds %Richard, %Richard* %temp267, i32 0, i32 0
  %vtable269 = load %Richard_vtable*, %Richard_vtable** %vtable268, align 8
  %fun_to_call270 = getelementptr inbounds %Richard_vtable, %Richard_vtable* %vtable269, i32 0, i32 2
  %function271 = load void (%Animal**, i32)*, void (%Animal**, i32)** %fun_to_call270, align 8
  %arg_cast272 = bitcast %Richard** %r to %Animal**
  call void %function271(%Animal** %arg_cast272, i32 2)
  %temp273 = load %Richard*, %Richard** %r, align 8
  %vtable274 = getelementptr inbounds %Richard, %Richard* %temp273, i32 0, i32 0
  %vtable275 = load %Richard_vtable*, %Richard_vtable** %vtable274, align 8
  %fun_to_call276 = getelementptr inbounds %Richard_vtable, %Richard_vtable* %vtable275, i32 0, i32 3
  %function277 = load void (%Animal**, i1)*, void (%Animal**, i1)** %fun_to_call276, align 8
  %arg_cast278 = bitcast %Richard** %r to %Animal**
  call void %function277(%Animal** %arg_cast278, i1 false)
  %temp279 = load %Richard*, %Richard** %r, align 8
  %vtable280 = getelementptr inbounds %Richard, %Richard* %temp279, i32 0, i32 0
  %vtable281 = load %Richard_vtable*, %Richard_vtable** %vtable280, align 8
  %fun_to_call282 = getelementptr inbounds %Richard_vtable, %Richard_vtable* %vtable281, i32 0, i32 4
  %function283 = load void (%Animal**, i1)*, void (%Animal**, i1)** %fun_to_call282, align 8
  %arg_cast284 = bitcast %Richard** %r to %Animal**
  call void %function283(%Animal** %arg_cast284, i1 false)
  %cast_assign285 = bitcast %Richard** %r to %Animal**
  %temp286 = load %Animal*, %Animal** %cast_assign285, align 8
  store %Animal* %temp286, %Animal** %a, align 8
  br label %merge208
}

define i1 @AnimalGame_makeGuess(%AnimalGame** %0, %Animal** %1, i32 %2) {
entry:
  %temp = alloca %AnimalGame*, align 8
  %temp1 = load %AnimalGame*, %AnimalGame** %0, align 8
  store %AnimalGame* %temp1, %AnimalGame** %temp, align 8
  %temp2 = alloca %Animal*, align 8
  %temp3 = load %Animal*, %Animal** %1, align 8
  store %Animal* %temp3, %Animal** %temp2, align 8
  %count = alloca i32, align 4
  store i32 %2, i32* %count, align 4
  %input = alloca i8*, align 8
  %printf = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @fmt.135, i32 0, i32 0), i8* getelementptr inbounds ([26 x i8], [26 x i8]* @global_str.138, i32 0, i32 0))
  %readaline = call i8** (...) @readaline()
  %get_temp = load i8*, i8** %readaline, align 8
  store i8* %get_temp, i8** %input, align 8
  %temp4 = load %Animal*, %Animal** %temp2, align 8
  %vtable = getelementptr inbounds %Animal, %Animal* %temp4, i32 0, i32 0
  %vtable5 = load %Animal_vtable*, %Animal_vtable** %vtable, align 8
  %fun_to_call = getelementptr inbounds %Animal_vtable, %Animal_vtable* %vtable5, i32 0, i32 6
  %function = load i8* (%Animal**)*, i8* (%Animal**)** %fun_to_call, align 8
  %getType_result = call i8* %function(%Animal** %temp2)
  %input6 = load i8*, i8** %input, align 8
  %streq = call i1 (i8*, i8*, ...) @streq(i8* %input6, i8* %getType_result)
  %tmp = xor i1 %streq, true
  br i1 %tmp, label %then, label %else24

merge:                                            ; preds = %else24
  %printf25 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @fmt.136, i32 0, i32 0), i8* getelementptr inbounds ([62 x i8], [62 x i8]* @global_str.143, i32 0, i32 0))
  ret i1 true

then:                                             ; preds = %entry
  %printf7 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @fmt.136, i32 0, i32 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @global_str.139, i32 0, i32 0))
  %count8 = load i32, i32* %count, align 4
  %tmp9 = add i32 %count8, 1
  store i32 %tmp9, i32* %count, align 4
  %count10 = load i32, i32* %count, align 4
  %tmp11 = icmp eq i32 %count10, 3
  br i1 %tmp11, label %then13, label %else

merge12:                                          ; preds = %else, %then13
  ret i1 false

then13:                                           ; preds = %then
  %printf14 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @fmt.136, i32 0, i32 0), i8* getelementptr inbounds ([35 x i8], [35 x i8]* @global_str.140, i32 0, i32 0))
  %printf15 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @fmt.135, i32 0, i32 0), i8* getelementptr inbounds ([24 x i8], [24 x i8]* @global_str.141, i32 0, i32 0))
  %temp16 = load %Animal*, %Animal** %temp2, align 8
  %vtable17 = getelementptr inbounds %Animal, %Animal* %temp16, i32 0, i32 0
  %vtable18 = load %Animal_vtable*, %Animal_vtable** %vtable17, align 8
  %fun_to_call19 = getelementptr inbounds %Animal_vtable, %Animal_vtable* %vtable18, i32 0, i32 6
  %function20 = load i8* (%Animal**)*, i8* (%Animal**)** %fun_to_call19, align 8
  %getType_result21 = call i8* %function20(%Animal** %temp2)
  %printf22 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @fmt.136, i32 0, i32 0), i8* %getType_result21)
  %printf23 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @fmt.136, i32 0, i32 0), i8* getelementptr inbounds ([29 x i8], [29 x i8]* @global_str.142, i32 0, i32 0))
  br label %merge12

else:                                             ; preds = %then
  br label %merge12

else24:                                           ; preds = %entry
  br label %merge
}

define void @AnimalGame_giveHint(%AnimalGame** %0, %Animal** %1) {
entry:
  %temp = alloca %AnimalGame*, align 8
  %temp1 = load %AnimalGame*, %AnimalGame** %0, align 8
  store %AnimalGame* %temp1, %AnimalGame** %temp, align 8
  %temp2 = alloca %Animal*, align 8
  %temp3 = load %Animal*, %Animal** %1, align 8
  store %Animal* %temp3, %Animal** %temp2, align 8
  %printf = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @fmt.145, i32 0, i32 0), i8* getelementptr inbounds ([38 x i8], [38 x i8]* @global_str.147, i32 0, i32 0))
  %printf4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @fmt.145, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @global_str.148, i32 0, i32 0))
  %printf5 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @fmt.145, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @global_str.149, i32 0, i32 0))
  %printf6 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @fmt.145, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @global_str.150, i32 0, i32 0))
  %printf7 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @fmt.145, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @global_str.151, i32 0, i32 0))
  %printf8 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @fmt.145, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @global_str.152, i32 0, i32 0))
  %printf9 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @fmt.145, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @global_str.153, i32 0, i32 0))
  %readaline = call i8** (...) @readaline()
  %get_temp = load i8*, i8** %readaline, align 8
  %input = alloca i8*, align 8
  store i8* %get_temp, i8** %input, align 8
  %input10 = load i8*, i8** %input, align 8
  %streq = call i1 (i8*, i8*, ...) @streq(i8* %input10, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @global_str.154, i32 0, i32 0))
  br i1 %streq, label %then, label %else

merge:                                            ; preds = %merge17, %then
  ret void

then:                                             ; preds = %entry
  %printf11 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @fmt.144, i32 0, i32 0), i8* getelementptr inbounds ([34 x i8], [34 x i8]* @global_str.155, i32 0, i32 0))
  %temp12 = load %Animal*, %Animal** %temp2, align 8
  %vtable = getelementptr inbounds %Animal, %Animal* %temp12, i32 0, i32 0
  %vtable13 = load %Animal_vtable*, %Animal_vtable** %vtable, align 8
  %fun_to_call = getelementptr inbounds %Animal_vtable, %Animal_vtable* %vtable13, i32 0, i32 5
  %function = load i8* (%Animal**)*, i8* (%Animal**)** %fun_to_call, align 8
  %getClass_result = call i8* %function(%Animal** %temp2)
  %printf14 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @fmt.145, i32 0, i32 0), i8* %getClass_result)
  br label %merge

else:                                             ; preds = %entry
  %input15 = load i8*, i8** %input, align 8
  %streq16 = call i1 (i8*, i8*, ...) @streq(i8* %input15, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @global_str.156, i32 0, i32 0))
  br i1 %streq16, label %then18, label %else27

merge17:                                          ; preds = %merge30, %then18
  br label %merge

then18:                                           ; preds = %else
  %printf19 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @fmt.144, i32 0, i32 0), i8* getelementptr inbounds ([16 x i8], [16 x i8]* @global_str.157, i32 0, i32 0))
  %temp20 = load %Animal*, %Animal** %temp2, align 8
  %vtable21 = getelementptr inbounds %Animal, %Animal* %temp20, i32 0, i32 0
  %vtable22 = load %Animal_vtable*, %Animal_vtable** %vtable21, align 8
  %fun_to_call23 = getelementptr inbounds %Animal_vtable, %Animal_vtable* %vtable22, i32 0, i32 7
  %function24 = load i32 (%Animal**)*, i32 (%Animal**)** %fun_to_call23, align 8
  %numLegs_result = call i32 %function24(%Animal** %temp2)
  %printf25 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @fmt.146, i32 0, i32 0), i32 %numLegs_result)
  %printf26 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @fmt.145, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @global_str.158, i32 0, i32 0))
  br label %merge17

else27:                                           ; preds = %else
  %input28 = load i8*, i8** %input, align 8
  %streq29 = call i1 (i8*, i8*, ...) @streq(i8* %input28, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @global_str.159, i32 0, i32 0))
  br i1 %streq29, label %then31, label %else42

merge30:                                          ; preds = %merge45, %merge37
  br label %merge17

then31:                                           ; preds = %else27
  %temp32 = load %Animal*, %Animal** %temp2, align 8
  %vtable33 = getelementptr inbounds %Animal, %Animal* %temp32, i32 0, i32 0
  %vtable34 = load %Animal_vtable*, %Animal_vtable** %vtable33, align 8
  %fun_to_call35 = getelementptr inbounds %Animal_vtable, %Animal_vtable* %vtable34, i32 0, i32 8
  %function36 = load i1 (%Animal**)*, i1 (%Animal**)** %fun_to_call35, align 8
  %hasFur_result = call i1 %function36(%Animal** %temp2)
  br i1 %hasFur_result, label %then38, label %else40

merge37:                                          ; preds = %else40, %then38
  br label %merge30

then38:                                           ; preds = %then31
  %printf39 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @fmt.145, i32 0, i32 0), i8* getelementptr inbounds ([25 x i8], [25 x i8]* @global_str.160, i32 0, i32 0))
  br label %merge37

else40:                                           ; preds = %then31
  %printf41 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @fmt.145, i32 0, i32 0), i8* getelementptr inbounds ([29 x i8], [29 x i8]* @global_str.161, i32 0, i32 0))
  br label %merge37

else42:                                           ; preds = %else27
  %input43 = load i8*, i8** %input, align 8
  %streq44 = call i1 (i8*, i8*, ...) @streq(i8* %input43, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @global_str.162, i32 0, i32 0))
  br i1 %streq44, label %then46, label %else57

merge45:                                          ; preds = %merge60, %merge52
  br label %merge30

then46:                                           ; preds = %else42
  %temp47 = load %Animal*, %Animal** %temp2, align 8
  %vtable48 = getelementptr inbounds %Animal, %Animal* %temp47, i32 0, i32 0
  %vtable49 = load %Animal_vtable*, %Animal_vtable** %vtable48, align 8
  %fun_to_call50 = getelementptr inbounds %Animal_vtable, %Animal_vtable* %vtable49, i32 0, i32 9
  %function51 = load i1 (%Animal**)*, i1 (%Animal**)** %fun_to_call50, align 8
  %canFly_result = call i1 %function51(%Animal** %temp2)
  br i1 %canFly_result, label %then53, label %else55

merge52:                                          ; preds = %else55, %then53
  br label %merge45

then53:                                           ; preds = %then46
  %printf54 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @fmt.145, i32 0, i32 0), i8* getelementptr inbounds ([19 x i8], [19 x i8]* @global_str.163, i32 0, i32 0))
  br label %merge52

else55:                                           ; preds = %then46
  %printf56 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @fmt.145, i32 0, i32 0), i8* getelementptr inbounds ([22 x i8], [22 x i8]* @global_str.164, i32 0, i32 0))
  br label %merge52

else57:                                           ; preds = %else42
  %input58 = load i8*, i8** %input, align 8
  %streq59 = call i1 (i8*, i8*, ...) @streq(i8* %input58, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @global_str.165, i32 0, i32 0))
  br i1 %streq59, label %then61, label %else67

merge60:                                          ; preds = %merge70, %then61
  br label %merge45

then61:                                           ; preds = %else57
  %temp62 = load %Animal*, %Animal** %temp2, align 8
  %vtable63 = getelementptr inbounds %Animal, %Animal* %temp62, i32 0, i32 0
  %vtable64 = load %Animal_vtable*, %Animal_vtable** %vtable63, align 8
  %fun_to_call65 = getelementptr inbounds %Animal_vtable, %Animal_vtable* %vtable64, i32 0, i32 10
  %function66 = load void (%Animal**)*, void (%Animal**)** %fun_to_call65, align 8
  call void %function66(%Animal** %temp2)
  br label %merge60

else67:                                           ; preds = %else57
  %input68 = load i8*, i8** %input, align 8
  %streq69 = call i1 (i8*, i8*, ...) @streq(i8* %input68, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @global_str.166, i32 0, i32 0))
  br i1 %streq69, label %then71, label %else77

merge70:                                          ; preds = %else77, %then71
  br label %merge60

then71:                                           ; preds = %else67
  %temp72 = load %Animal*, %Animal** %temp2, align 8
  %vtable73 = getelementptr inbounds %Animal, %Animal* %temp72, i32 0, i32 0
  %vtable74 = load %Animal_vtable*, %Animal_vtable** %vtable73, align 8
  %fun_to_call75 = getelementptr inbounds %Animal_vtable, %Animal_vtable* %vtable74, i32 0, i32 11
  %function76 = load void (%Animal**)*, void (%Animal**)** %fun_to_call75, align 8
  call void %function76(%Animal** %temp2)
  br label %merge70

else77:                                           ; preds = %else67
  %printf78 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @fmt.145, i32 0, i32 0), i8* getelementptr inbounds ([35 x i8], [35 x i8]* @global_str.167, i32 0, i32 0))
  br label %merge70
}

declare noalias i8* @malloc(i32)

define i32 @main() {
entry:
  %malloccall = tail call i8* @malloc(i32 ptrtoint (%AnimalGame* getelementptr (%AnimalGame, %AnimalGame* null, i32 1) to i32))
  %AnimalGame = bitcast i8* %malloccall to %AnimalGame*
  %vtable = getelementptr inbounds %AnimalGame, %AnimalGame* %AnimalGame, i32 0, i32 0
  store %AnimalGame_vtable* @AnimalGame_vtable_data, %AnimalGame_vtable** %vtable, align 8
  %temp = alloca %AnimalGame*, align 8
  %num_permitted = getelementptr inbounds %AnimalGame, %AnimalGame* %AnimalGame, i32 0, i32 1
  store i32 1, i32* %num_permitted, align 4
  %permit_list = getelementptr inbounds %AnimalGame, %AnimalGame* %AnimalGame, i32 0, i32 2
  store [1 x i8*] [i8* getelementptr inbounds ([11 x i8], [11 x i8]* @temp_str.171, i32 0, i32 0)], [1 x i8*]* %permit_list, align 8
  store %AnimalGame* %AnimalGame, %AnimalGame** %temp, align 8
  %ag = alloca %AnimalGame*, align 8
  %temp1 = load %AnimalGame*, %AnimalGame** %temp, align 8
  store %AnimalGame* %temp1, %AnimalGame** %ag, align 8
  %temp2 = load %AnimalGame*, %AnimalGame** %ag, align 8
  %vtable3 = getelementptr inbounds %AnimalGame, %AnimalGame* %temp2, i32 0, i32 0
  %vtable4 = load %AnimalGame_vtable*, %AnimalGame_vtable** %vtable3, align 8
  %fun_to_call = getelementptr inbounds %AnimalGame_vtable, %AnimalGame_vtable* %vtable4, i32 0, i32 0
  %function = load void (%AnimalGame**)*, void (%AnimalGame**)** %fun_to_call, align 8
  call void %function(%AnimalGame** %ag)
  ret i32 0
}
