; ModuleID = 'Iris'
source_filename = "Iris"

%Object_vtable = type {}
%Animal_vtable = type { i8* (%Animal, i32)* }
%Animal = type { i32, [0 x i8*], i32, i32, i1, i8*, i8*, i1 }
%Josh_vtable = type { i32 (%Josh)* }
%Josh = type { i32, [0 x i8*], i32, i32 }
%Main_vtable = type { i32 (%Main)* }
%Main = type { i32, [0 x i8*] }
%big_vtable = type { %Object_vtable*, %Animal_vtable*, %Josh_vtable*, %Main_vtable* }

@Object_vtable_data = global %Object_vtable zeroinitializer
@fmt = private unnamed_addr constant [4 x i8] c"%s\0A\00", align 1
@"ruh roh raggy" = private unnamed_addr constant [14 x i8] c"ruh roh raggy\00", align 1
@Animal_vtable_data = global %Animal_vtable { i8* (%Animal, i32)* @Animal_noise }
@fmt.1 = private unnamed_addr constant [4 x i8] c"%s\0A\00", align 1
@Josh_vtable_data = global %Josh_vtable { i32 (%Josh)* @Josh_the_goat }
@fmt.2 = private unnamed_addr constant [4 x i8] c"%s\0A\00", align 1
@"animal name is josh" = private unnamed_addr constant [20 x i8] c"animal name is josh\00", align 1
@"three legs!" = private unnamed_addr constant [12 x i8] c"three legs!\00", align 1
@Main_vtable_data = global %Main_vtable { i32 (%Main)* @main }
@big_vtable_data = global %big_vtable { %Object_vtable* @Object_vtable_data, %Animal_vtable* @Animal_vtable_data, %Josh_vtable* @Josh_vtable_data, %Main_vtable* @Main_vtable_data }

declare i32 @printf(i8*, ...)

define i8* @Animal_noise(%Animal %0, i32 %1) {
entry:
  ret i8* getelementptr inbounds ([14 x i8], [14 x i8]* @"ruh roh raggy", i32 0, i32 0)
}

define i32 @Josh_the_goat(%Josh %0) {
entry:
  ret i32 1
}

define i32 @main(%Main %0) {
entry:
  %a = alloca %Animal, align 8
  %vtable_index = getelementptr inbounds %Animal, %Animal* %a, i32 0, i32 0
  store i32 1, i32* %vtable_index, align 4
  %aname = getelementptr inbounds %Animal, %Animal* %a, i32 0, i32 5
  store i8* getelementptr inbounds ([20 x i8], [20 x i8]* @"animal name is josh", i32 0, i32 0), i8** %aname, align 8
  %alegs = getelementptr inbounds %Animal, %Animal* %a, i32 0, i32 2
  store i32 3, i32* %alegs, align 4
  %alegs1 = getelementptr inbounds %Animal, %Animal* %a, i32 0, i32 2
  %alegs2 = load i32, i32* %alegs1, align 4
  %tmp = icmp eq i32 %alegs2, 3
  br i1 %tmp, label %then, label %else

merge:                                            ; preds = %else, %then
  %aname3 = getelementptr inbounds %Animal, %Animal* %a, i32 0, i32 5
  %aname4 = load i8*, i8** %aname3, align 8
  %printf5 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @fmt.2, i32 0, i32 0), i8* %aname4)
  ret i32 0

then:                                             ; preds = %entry
  %printf = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @fmt.2, i32 0, i32 0), i8* getelementptr inbounds ([12 x i8], [12 x i8]* @"three legs!", i32 0, i32 0))
  br label %merge

else:                                             ; preds = %entry
  br label %merge
}
