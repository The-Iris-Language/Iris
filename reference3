; ModuleID = 'Iris'
source_filename = "Iris"

%Object_vtable = type {}
%Animal_vtable = type { i8* (%Animal*, i32)*, %Animal* (%Animal*)* }
%Animal = type { %Animal_vtable*, [0 x i8*], i32, i32, i1, i8*, i1 }
%Dog_vtable = type { i8* (%Dog*, i32)*, %Animal* (%Animal*)* }
%Dog = type { %Dog_vtable*, [0 x i8*], i32, i32, i1, i8*, i1 }
%Temp_vtable = type {}
%Main_vtable = type { i32 (%Main*)* }
%Main = type { %Main_vtable*, [0 x i8*] }
%big_vtable = type { %Object_vtable*, %Animal_vtable*, %Dog_vtable*, %Temp_vtable*, %Main_vtable* }
%Temp = type { %Temp_vtable*, [0 x i8*], i32 }

@Object_vtable_data = global %Object_vtable zeroinitializer
@fmt = private unnamed_addr constant [4 x i8] c"%s\0A\00", align 1
@"ruh roh raggy" = private unnamed_addr constant [14 x i8] c"ruh roh raggy\00", align 1
@fmt.1 = private unnamed_addr constant [4 x i8] c"%s\0A\00", align 1
@animal = private unnamed_addr constant [7 x i8] c"animal\00", align 1
@Animal_vtable_data = global %Animal_vtable { i8* (%Animal*, i32)* @Animal_noise, %Animal* (%Animal*)* @Animal_newAnimal }
@fmt.2 = private unnamed_addr constant [4 x i8] c"%s\0A\00", align 1
@bark = private unnamed_addr constant [5 x i8] c"bark\00", align 1
@Dog_vtable_data = global %Dog_vtable { i8* (%Dog*, i32)* @Dog_noise, %Animal* (%Animal*)* @Animal_newAnimal }
@Temp_vtable_data = global %Temp_vtable zeroinitializer
@fmt.3 = private unnamed_addr constant [4 x i8] c"%s\0A\00", align 1
@"Set a.legs to 3" = private unnamed_addr constant [16 x i8] c"Set a.legs to 3\00", align 1
@Main_vtable_data = global %Main_vtable { i32 (%Main*)* @main }
@big_vtable_data = global %big_vtable { %Object_vtable* @Object_vtable_data, %Animal_vtable* @Animal_vtable_data, %Dog_vtable* @Dog_vtable_data, %Temp_vtable* @Temp_vtable_data, %Main_vtable* @Main_vtable_data }

declare i32 @printf(i8*, ...)

define i8* @Animal_noise(%Animal* %0, i32 %1) {
entry:
  %temp = alloca %Animal*, align 8
  store %Animal* %0, %Animal** %temp, align 8
  %self = load %Animal*, %Animal** %temp, align 8
  %volume = alloca i32, align 4
  store i32 %1, i32* %volume, align 4
  ret i8* getelementptr inbounds ([14 x i8], [14 x i8]* @"ruh roh raggy", i32 0, i32 0)
}

define %Animal* @Animal_newAnimal(%Animal* %0) {
entry:
  %temp = alloca %Animal*, align 8
  store %Animal* %0, %Animal** %temp, align 8
  %self = load %Animal*, %Animal** %temp, align 8
  %malloccall = tail call i8* @malloc(i32 ptrtoint (%Animal* getelementptr (%Animal, %Animal* null, i32 1) to i32))
  %Animal = bitcast i8* %malloccall to %Animal*
  %vtable = getelementptr inbounds %Animal, %Animal* %Animal, i32 0, i32 0
  store %Animal_vtable* @Animal_vtable_data, %Animal_vtable** %vtable, align 8
  %temp1 = alloca %Animal*, align 8
  store %Animal* %Animal, %Animal** %temp1, align 8
  %a = load %Animal*, %Animal** %temp1, align 8
  %printf = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @fmt.1, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @animal, i32 0, i32 0))
  ret %Animal* %a
}

declare noalias i8* @malloc(i32)

define i8* @Dog_noise(%Dog* %0, i32 %1) {
entry:
  %temp = alloca %Dog*, align 8
  store %Dog* %0, %Dog** %temp, align 8
  %self = load %Dog*, %Dog** %temp, align 8
  %volume = alloca i32, align 4
  store i32 %1, i32* %volume, align 4
  ret i8* getelementptr inbounds ([5 x i8], [5 x i8]* @bark, i32 0, i32 0)
}

define i32 @main(%Main* %0) {
entry:
  %temp = alloca %Main*, align 8
  store %Main* %0, %Main** %temp, align 8
  %self = load %Main*, %Main** %temp, align 8
  %malloccall = tail call i8* @malloc(i32 ptrtoint (%Animal* getelementptr (%Animal, %Animal* null, i32 1) to i32))
  %Animal = bitcast i8* %malloccall to %Animal*
  %vtable = getelementptr inbounds %Animal, %Animal* %Animal, i32 0, i32 0
  store %Animal_vtable* @Animal_vtable_data, %Animal_vtable** %vtable, align 8
  %temp1 = alloca %Animal*, align 8
  store %Animal* %Animal, %Animal** %temp1, align 8
  %a = load %Animal*, %Animal** %temp1, align 8
  %alegs = getelementptr inbounds %Animal, %Animal* %a, i32 0, i32 2
  store i32 3, i32* %alegs, align 4
  %printf = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @fmt.3, i32 0, i32 0), i8* getelementptr inbounds ([16 x i8], [16 x i8]* @"Set a.legs to 3", i32 0, i32 0))
  %vtable2 = getelementptr inbounds %Animal, %Animal* %a, i32 0, i32 0
  %vtable3 = load %Animal_vtable*, %Animal_vtable** %vtable2, align 8
  %fun_to_call = getelementptr inbounds %Animal_vtable, %Animal_vtable* %vtable3, i32 0, i32 1
  %function = load %Animal* (%Animal*)*, %Animal* (%Animal*)** %fun_to_call, align 8
  %newAnimal_result = call %Animal* %function(%Animal* %a)
  %temp4 = alloca %Animal*, align 8
  store %Animal* %newAnimal_result, %Animal** %temp4, align 8
  %a1 = load %Animal*, %Animal** %temp4, align 8
  %a1legs = getelementptr inbounds %Animal, %Animal* %a1, i32 0, i32 2
  store i32 10, i32* %a1legs, align 4
  %vtable5 = getelementptr inbounds %Animal, %Animal* %a1, i32 0, i32 0
  %vtable6 = load %Animal_vtable*, %Animal_vtable** %vtable5, align 8
  %fun_to_call7 = getelementptr inbounds %Animal_vtable, %Animal_vtable* %vtable6, i32 0, i32 0
  %function8 = load i8* (%Animal*, i32)*, i8* (%Animal*, i32)** %fun_to_call7, align 8
  %noise_result = call i8* %function8(%Animal* %a1, i32 10)
  %printf9 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @fmt.3, i32 0, i32 0), i8* %noise_result)
  %malloccall10 = tail call i8* @malloc(i32 ptrtoint (%Temp* getelementptr (%Temp, %Temp* null, i32 1) to i32))
  %Temp = bitcast i8* %malloccall10 to %Temp*
  %vtable11 = getelementptr inbounds %Temp, %Temp* %Temp, i32 0, i32 0
  store %Temp_vtable* @Temp_vtable_data, %Temp_vtable** %vtable11, align 8
  %temp12 = alloca %Temp*, align 8
  store %Temp* %Temp, %Temp** %temp12, align 8
  %temp13 = load %Temp*, %Temp** %temp12, align 8
  ret i32 0
}
